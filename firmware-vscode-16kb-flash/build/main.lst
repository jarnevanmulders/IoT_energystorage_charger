ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 1


   1              		.cpu cortex-m0plus
   2              		.arch armv6s-m
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 0
  12              		.eabi_attribute 18, 4
  13              		.file	"main.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.file 1 "Core/Src/main.c"
  18              		.section	.text.MX_GPIO_Init,"ax",%progbits
  19              		.align	1
  20              		.syntax unified
  21              		.code	16
  22              		.thumb_func
  24              	MX_GPIO_Init:
  25              	.LFB46:
   1:Core/Src/main.c **** /* USER CODE BEGIN Header */
   2:Core/Src/main.c **** /**
   3:Core/Src/main.c ****   ******************************************************************************
   4:Core/Src/main.c ****   * @file           : main.c
   5:Core/Src/main.c ****   * @brief          : Main program body
   6:Core/Src/main.c ****   ******************************************************************************
   7:Core/Src/main.c ****   * @attention
   8:Core/Src/main.c ****   *
   9:Core/Src/main.c ****   * Copyright (c) 2023 STMicroelectronics.
  10:Core/Src/main.c ****   * All rights reserved.
  11:Core/Src/main.c ****   *
  12:Core/Src/main.c ****   * This software is licensed under terms that can be found in the LICENSE file
  13:Core/Src/main.c ****   * in the root directory of this software component.
  14:Core/Src/main.c ****   * If no LICENSE file comes with this software, it is provided AS-IS.
  15:Core/Src/main.c ****   *
  16:Core/Src/main.c ****   ******************************************************************************
  17:Core/Src/main.c ****   */
  18:Core/Src/main.c **** /* USER CODE END Header */
  19:Core/Src/main.c **** /* Includes ------------------------------------------------------------------*/
  20:Core/Src/main.c **** #include "main.h"
  21:Core/Src/main.c **** 
  22:Core/Src/main.c **** /* Private includes ----------------------------------------------------------*/
  23:Core/Src/main.c **** /* USER CODE BEGIN Includes */
  24:Core/Src/main.c **** 
  25:Core/Src/main.c **** /* USER CODE END Includes */
  26:Core/Src/main.c **** 
  27:Core/Src/main.c **** /* Private typedef -----------------------------------------------------------*/
  28:Core/Src/main.c **** /* USER CODE BEGIN PTD */
  29:Core/Src/main.c **** 
  30:Core/Src/main.c **** /* USER CODE END PTD */
  31:Core/Src/main.c **** 
  32:Core/Src/main.c **** /* Private define ------------------------------------------------------------*/
  33:Core/Src/main.c **** /* USER CODE BEGIN PD */
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 2


  34:Core/Src/main.c **** 
  35:Core/Src/main.c **** #define VREFINT_CAL_ADDR          ((uint16_t*) ((uint32_t) 0x1FF80078))
  36:Core/Src/main.c **** #define MIN_VOLTAGE               5000
  37:Core/Src/main.c **** #define MAX_VOLTAGE               22000
  38:Core/Src/main.c **** #define MIN_CURRENT               200
  39:Core/Src/main.c **** #define SLEEP_VOLTAGE             1000
  40:Core/Src/main.c **** #define MIN_CHARGE_CUTTOF_VOLTAGE 2600
  41:Core/Src/main.c **** #define PID_SETPOINT              10000
  42:Core/Src/main.c **** 
  43:Core/Src/main.c **** // PID Parameters
  44:Core/Src/main.c **** #define PID_UNDER_THRESHOLD       0
  45:Core/Src/main.c **** #define PID_UPPER_THRESHOLD       30 // = 50/255*50kOhm approx 10 kOhm (50kohm digital potentiomete
  46:Core/Src/main.c **** 
  47:Core/Src/main.c **** /* USER CODE END PD */
  48:Core/Src/main.c **** 
  49:Core/Src/main.c **** /* Private macro -------------------------------------------------------------*/
  50:Core/Src/main.c **** /* USER CODE BEGIN PM */
  51:Core/Src/main.c **** 
  52:Core/Src/main.c **** /* USER CODE END PM */
  53:Core/Src/main.c **** 
  54:Core/Src/main.c **** /* Private variables ---------------------------------------------------------*/
  55:Core/Src/main.c **** ADC_HandleTypeDef hadc;
  56:Core/Src/main.c **** 
  57:Core/Src/main.c **** SPI_HandleTypeDef hspi1;
  58:Core/Src/main.c **** 
  59:Core/Src/main.c **** TIM_HandleTypeDef htim2;
  60:Core/Src/main.c **** 
  61:Core/Src/main.c **** UART_HandleTypeDef huart2;
  62:Core/Src/main.c **** 
  63:Core/Src/main.c **** /* USER CODE BEGIN PV */
  64:Core/Src/main.c **** 
  65:Core/Src/main.c **** /* USER CODE END PV */
  66:Core/Src/main.c **** 
  67:Core/Src/main.c **** /* Private function prototypes -----------------------------------------------*/
  68:Core/Src/main.c **** void SystemClock_Config(void);
  69:Core/Src/main.c **** static void MX_GPIO_Init(void);
  70:Core/Src/main.c **** static void MX_ADC_Init(void);
  71:Core/Src/main.c **** static void MX_USART2_UART_Init(void);
  72:Core/Src/main.c **** static void MX_SPI1_Init(void);
  73:Core/Src/main.c **** static void MX_TIM2_Init(void);
  74:Core/Src/main.c **** /* USER CODE BEGIN PFP */
  75:Core/Src/main.c **** 
  76:Core/Src/main.c **** // *** Load switch functions *** //
  77:Core/Src/main.c **** void load_switch_enable(void);
  78:Core/Src/main.c **** void load_switch_disable(void);
  79:Core/Src/main.c **** 
  80:Core/Src/main.c **** // *** Blocking led functions *** //
  81:Core/Src/main.c **** void led_blink(uint16_t time_delay_1, uint16_t time_delay_2);
  82:Core/Src/main.c **** 
  83:Core/Src/main.c **** // *** Non blocking led functios *** //
  84:Core/Src/main.c **** void led_blink_nb(uint16_t time_delay_1, uint16_t time_delay_2);
  85:Core/Src/main.c **** 
  86:Core/Src/main.c **** // *** SAFELY ENABLE/DISABLE BUCK CONVERTER *** //
  87:Core/Src/main.c **** void Enable_buck_converter(void);
  88:Core/Src/main.c **** void Disable_buck_converter(void);
  89:Core/Src/main.c **** 
  90:Core/Src/main.c **** // *** Calculate CRC *** //
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 3


  91:Core/Src/main.c **** uint8_t calculate_crc_xor(const uint8_t *data, size_t length);
  92:Core/Src/main.c **** 
  93:Core/Src/main.c **** // *** PID controller *** //
  94:Core/Src/main.c **** uint16_t pid_controller(uint16_t measured_value);
  95:Core/Src/main.c **** 
  96:Core/Src/main.c **** // *** Change resistance digital potentiometer *** //
  97:Core/Src/main.c **** void change_potentiometer(uint8_t new_value);
  98:Core/Src/main.c **** 
  99:Core/Src/main.c **** /* USER CODE END PFP */
 100:Core/Src/main.c **** 
 101:Core/Src/main.c **** /* Private user code ---------------------------------------------------------*/
 102:Core/Src/main.c **** /* USER CODE BEGIN 0 */
 103:Core/Src/main.c **** 
 104:Core/Src/main.c **** uint16_t ADC_CH5, ADC_CH6, ADC_CH7, ADC_REF;
 105:Core/Src/main.c **** uint16_t supply_voltage_mv = 0;
 106:Core/Src/main.c **** uint16_t input_voltage_mv = 0;
 107:Core/Src/main.c **** uint16_t buck_output_voltage_mv = 0;
 108:Core/Src/main.c **** uint16_t buck_current_ma = 0;
 109:Core/Src/main.c **** uint8_t previous_state = 0;
 110:Core/Src/main.c **** uint16_t timer_check = 0;
 111:Core/Src/main.c **** 
 112:Core/Src/main.c **** // Non blocking blink  
 113:Core/Src/main.c **** uint8_t isOn;
 114:Core/Src/main.c **** uint32_t timestamp;
 115:Core/Src/main.c **** 
 116:Core/Src/main.c **** // Send message
 117:Core/Src/main.c **** uint8_t send_status = 1;
 118:Core/Src/main.c **** 
 119:Core/Src/main.c **** // PID result
 120:Core/Src/main.c **** uint16_t pid_result;
 121:Core/Src/main.c **** uint16_t pid_setpoint = 0;
 122:Core/Src/main.c **** uint8_t check = 0;
 123:Core/Src/main.c **** int32_t control_signal = PID_UPPER_THRESHOLD;
 124:Core/Src/main.c **** int32_t prev_control_signal = PID_UPPER_THRESHOLD;
 125:Core/Src/main.c **** 
 126:Core/Src/main.c **** int32_t integral = PID_UPPER_THRESHOLD*1000;     // Integral term accumulator
 127:Core/Src/main.c **** // uint32_t integral_2 = 0;     // Integral term accumulator
 128:Core/Src/main.c **** int32_t prev_error = 0;   // Previous error for derivative term
 129:Core/Src/main.c **** uint8_t last_stable_PID_value;
 130:Core/Src/main.c **** uint16_t last_stable_voltage;
 131:Core/Src/main.c **** 
 132:Core/Src/main.c **** // Buffer keeping SPI commands to change resistance of programmable potentiometer 
 133:Core/Src/main.c **** uint8_t spi_buffer [2] = {0, 0};
 134:Core/Src/main.c **** 
 135:Core/Src/main.c **** // State machine
 136:Core/Src/main.c **** typedef enum {INIT, START_CHARGING, CHARGING_PID, CHARGING_NO_PID, STOP_CHARGING, OVER_VOLTAGE, SLE
 137:Core/Src/main.c **** State_type current_state = INIT;
 138:Core/Src/main.c **** 
 139:Core/Src/main.c **** /* USER CODE END 0 */
 140:Core/Src/main.c **** 
 141:Core/Src/main.c **** /**
 142:Core/Src/main.c ****   * @brief  The application entry point.
 143:Core/Src/main.c ****   * @retval int
 144:Core/Src/main.c ****   */
 145:Core/Src/main.c **** int main(void)
 146:Core/Src/main.c **** {
 147:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 4


 148:Core/Src/main.c **** 
 149:Core/Src/main.c ****   /* USER CODE END 1 */
 150:Core/Src/main.c **** 
 151:Core/Src/main.c ****   /* MCU Configuration--------------------------------------------------------*/
 152:Core/Src/main.c **** 
 153:Core/Src/main.c ****   /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 154:Core/Src/main.c ****   HAL_Init();
 155:Core/Src/main.c **** 
 156:Core/Src/main.c ****   /* USER CODE BEGIN Init */
 157:Core/Src/main.c **** 
 158:Core/Src/main.c ****   /* USER CODE END Init */
 159:Core/Src/main.c **** 
 160:Core/Src/main.c ****   /* Configure the system clock */
 161:Core/Src/main.c ****   SystemClock_Config();
 162:Core/Src/main.c **** 
 163:Core/Src/main.c ****   /* USER CODE BEGIN SysInit */
 164:Core/Src/main.c **** 
 165:Core/Src/main.c ****   /* USER CODE END SysInit */
 166:Core/Src/main.c **** 
 167:Core/Src/main.c ****   /* Initialize all configured peripherals */
 168:Core/Src/main.c ****   MX_GPIO_Init();
 169:Core/Src/main.c ****   MX_ADC_Init();
 170:Core/Src/main.c ****   MX_USART2_UART_Init();
 171:Core/Src/main.c ****   MX_SPI1_Init();
 172:Core/Src/main.c ****   MX_TIM2_Init();
 173:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 174:Core/Src/main.c **** 
 175:Core/Src/main.c ****   // Calibrate ADC
 176:Core/Src/main.c ****   HAL_ADCEx_Calibration_Start(&hadc, ADC_SINGLE_ENDED);
 177:Core/Src/main.c **** 
 178:Core/Src/main.c ****   // Start timer
 179:Core/Src/main.c ****   HAL_TIM_Base_Start_IT(&htim2);
 180:Core/Src/main.c **** 
 181:Core/Src/main.c ****   // Start up completed (small blink)
 182:Core/Src/main.c ****   led_blink(500, 500);
 183:Core/Src/main.c **** 
 184:Core/Src/main.c ****   /* USER CODE END 2 */
 185:Core/Src/main.c **** 
 186:Core/Src/main.c ****   /* Infinite loop */
 187:Core/Src/main.c ****   /* USER CODE BEGIN WHILE */
 188:Core/Src/main.c ****   while (1)
 189:Core/Src/main.c ****   {
 190:Core/Src/main.c ****     /* USER CODE END WHILE */
 191:Core/Src/main.c **** 
 192:Core/Src/main.c ****     /* USER CODE BEGIN 3 */
 193:Core/Src/main.c **** 
 194:Core/Src/main.c ****     // Delay (prevent sampling ADC to quickly)
 195:Core/Src/main.c ****     HAL_Delay(100);
 196:Core/Src/main.c **** 
 197:Core/Src/main.c ****     // Start ADC Conversion and read two ADC values
 198:Core/Src/main.c **** 		HAL_ADC_Start(&hadc);
 199:Core/Src/main.c ****     
 200:Core/Src/main.c ****     // ADC_CHANNEL_5 & Read The ADC Conversion Result
 201:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc, 100);
 202:Core/Src/main.c **** 		ADC_CH5 = HAL_ADC_GetValue(&hadc);
 203:Core/Src/main.c **** 
 204:Core/Src/main.c ****     // ADC_CHANNEL_6 & Read The ADC Conversion Result
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 5


 205:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc, 100);
 206:Core/Src/main.c **** 		ADC_CH6 = HAL_ADC_GetValue(&hadc);
 207:Core/Src/main.c **** 
 208:Core/Src/main.c ****     // ADC_CHANNEL_7 & Read The ADC Conversion Result
 209:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc, 100);
 210:Core/Src/main.c **** 		ADC_CH7 = HAL_ADC_GetValue(&hadc);
 211:Core/Src/main.c **** 
 212:Core/Src/main.c ****     // ADC_CHANNEL_VREFINT & Read The ADC Conversion Result
 213:Core/Src/main.c ****     HAL_ADC_PollForConversion(&hadc, 100);
 214:Core/Src/main.c **** 		ADC_REF = HAL_ADC_GetValue(&hadc);
 215:Core/Src/main.c **** 
 216:Core/Src/main.c ****     // Stop ADC Conversion
 217:Core/Src/main.c ****     HAL_ADC_Stop(&hadc);
 218:Core/Src/main.c **** 
 219:Core/Src/main.c ****     // Calculate supply voltage MCU
 220:Core/Src/main.c ****     supply_voltage_mv = 1200*4096/ADC_REF;
 221:Core/Src/main.c **** 
 222:Core/Src/main.c ****     // Calculate input voltage BUCK converter
 223:Core/Src/main.c ****     input_voltage_mv = ADC_CH5*supply_voltage_mv/4096*224700/4700;
 224:Core/Src/main.c **** 
 225:Core/Src/main.c ****     // Calculate buck converter output voltage
 226:Core/Src/main.c ****     buck_output_voltage_mv = ADC_CH7*supply_voltage_mv/4096*71000/15000;
 227:Core/Src/main.c **** 
 228:Core/Src/main.c ****     // Calculate buck converter output current
 229:Core/Src/main.c ****     buck_current_ma = ADC_CH6*supply_voltage_mv/4096*1000/780;
 230:Core/Src/main.c **** 
 231:Core/Src/main.c **** 
 232:Core/Src/main.c ****     if(input_voltage_mv > MAX_VOLTAGE){
 233:Core/Src/main.c ****       current_state = OVER_VOLTAGE;
 234:Core/Src/main.c ****     }
 235:Core/Src/main.c **** 
 236:Core/Src/main.c ****     
 237:Core/Src/main.c ****     ///////////////////////////
 238:Core/Src/main.c ****     // *** State machine *** //
 239:Core/Src/main.c ****     ///////////////////////////
 240:Core/Src/main.c **** 
 241:Core/Src/main.c ****     // Check input voltage in not below minimum voltage
 242:Core/Src/main.c ****     if(input_voltage_mv < SLEEP_VOLTAGE){
 243:Core/Src/main.c ****       current_state = SLEEP;
 244:Core/Src/main.c ****     }
 245:Core/Src/main.c **** 
 246:Core/Src/main.c ****     switch (current_state){
 247:Core/Src/main.c ****       case INIT:
 248:Core/Src/main.c ****         // No charging may occur in the INIT phase
 249:Core/Src/main.c ****         Disable_buck_converter();
 250:Core/Src/main.c **** 
 251:Core/Src/main.c ****         // Reset PID result
 252:Core/Src/main.c ****         pid_result = PID_UPPER_THRESHOLD;
 253:Core/Src/main.c ****         control_signal = PID_UPPER_THRESHOLD;
 254:Core/Src/main.c ****         prev_control_signal = PID_UPPER_THRESHOLD;
 255:Core/Src/main.c ****         integral = PID_UPPER_THRESHOLD*1000;
 256:Core/Src/main.c ****         prev_error = 0;
 257:Core/Src/main.c **** 
 258:Core/Src/main.c ****         // Check input voltage before start charging
 259:Core/Src/main.c ****         if(input_voltage_mv < MAX_VOLTAGE && input_voltage_mv > MIN_VOLTAGE){
 260:Core/Src/main.c ****           current_state = START_CHARGING;
 261:Core/Src/main.c ****           break;
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 6


 262:Core/Src/main.c ****         }
 263:Core/Src/main.c **** 
 264:Core/Src/main.c ****         // Blink led
 265:Core/Src/main.c ****         led_blink_nb(500, 500);
 266:Core/Src/main.c ****       break;
 267:Core/Src/main.c ****       case START_CHARGING: 
 268:Core/Src/main.c ****         // Enable buck converter safely
 269:Core/Src/main.c ****         Enable_buck_converter();
 270:Core/Src/main.c **** 
 271:Core/Src/main.c ****         // Change state
 272:Core/Src/main.c ****         current_state = CHARGING_PID;
 273:Core/Src/main.c ****       break;
 274:Core/Src/main.c ****       case CHARGING_PID:
 275:Core/Src/main.c ****         // Blink led
 276:Core/Src/main.c ****         led_blink_nb(100, 900);
 277:Core/Src/main.c ****         
 278:Core/Src/main.c ****         // Check input voltage with PID controller
 279:Core/Src/main.c ****         if(check == 5){
 280:Core/Src/main.c ****           pid_result = pid_controller(input_voltage_mv);
 281:Core/Src/main.c ****           check = 0;
 282:Core/Src/main.c ****         }
 283:Core/Src/main.c ****         check++;
 284:Core/Src/main.c **** 
 285:Core/Src/main.c ****         // Compensate programmable potentiometer
 286:Core/Src/main.c ****         change_potentiometer(pid_result);
 287:Core/Src/main.c **** 
 288:Core/Src/main.c ****         // If under voltage occurs, wait for enough voltage to resume
 289:Core/Src/main.c ****         if(input_voltage_mv < MIN_VOLTAGE){
 290:Core/Src/main.c ****           current_state = INIT;
 291:Core/Src/main.c ****           
 292:Core/Src/main.c ****           // // Not enough power at the receiver - keep last stable PID value
 293:Core/Src/main.c ****           // last_stable_PID_value = pid_result + 2;
 294:Core/Src/main.c ****           // last_stable_voltage = input_voltage_mv;
 295:Core/Src/main.c **** 
 296:Core/Src/main.c ****           // // Compensate programmable potentiometer
 297:Core/Src/main.c ****           // change_potentiometer(last_stable_PID_value);
 298:Core/Src/main.c **** 
 299:Core/Src/main.c ****           // // No PID
 300:Core/Src/main.c ****           // current_state = CHARGING_NO_PID;
 301:Core/Src/main.c **** 
 302:Core/Src/main.c ****           break;
 303:Core/Src/main.c ****         }
 304:Core/Src/main.c **** 
 305:Core/Src/main.c ****         // Check for current lower then MIN_CURRENT after 10 sec
 306:Core/Src/main.c ****         if(buck_current_ma < MIN_CURRENT && timer_check > 100 && supply_voltage_mv > MIN_CHARGE_CUT
 307:Core/Src/main.c ****           timer_check = 0;
 308:Core/Src/main.c ****           current_state = STOP_CHARGING;
 309:Core/Src/main.c ****         }
 310:Core/Src/main.c **** 
 311:Core/Src/main.c ****         timer_check++;
 312:Core/Src/main.c **** 
 313:Core/Src/main.c ****       break;
 314:Core/Src/main.c ****       // case CHARGING_NO_PID:
 315:Core/Src/main.c **** 
 316:Core/Src/main.c ****       //   // Blink led
 317:Core/Src/main.c ****       //   led_blink_nb(100, 900);
 318:Core/Src/main.c **** 
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 7


 319:Core/Src/main.c ****       //   int16_t num = last_stable_voltage - input_voltage_mv;
 320:Core/Src/main.c ****       //   if(num < 0){
 321:Core/Src/main.c ****       //     num = -num;
 322:Core/Src/main.c ****       //   }
 323:Core/Src/main.c ****       //   if(num > 1000){
 324:Core/Src/main.c ****       //     current_state = INIT;
 325:Core/Src/main.c ****       //   }
 326:Core/Src/main.c **** 
 327:Core/Src/main.c ****       // break;
 328:Core/Src/main.c ****       case STOP_CHARGING:
 329:Core/Src/main.c ****         // Disable buck conveter safely
 330:Core/Src/main.c ****         Disable_buck_converter();
 331:Core/Src/main.c **** 
 332:Core/Src/main.c ****         // Reset PID result
 333:Core/Src/main.c ****         pid_result = PID_UPPER_THRESHOLD;
 334:Core/Src/main.c ****         control_signal = PID_UPPER_THRESHOLD;
 335:Core/Src/main.c ****         prev_control_signal = PID_UPPER_THRESHOLD;
 336:Core/Src/main.c **** 
 337:Core/Src/main.c ****         // SEND MESSAGE TO TRANSMITTER
 338:Core/Src/main.c **** 
 339:Core/Src/main.c ****         // if(buck_current_ma < MIN_CURRENT && supply_voltage_mv > MIN_CHARGE_CUTTOF_VOLTAGE){
 340:Core/Src/main.c ****         //   current_state = SLEEP;
 341:Core/Src/main.c ****         // }
 342:Core/Src/main.c ****         // else{
 343:Core/Src/main.c ****         //   current_state = INIT;
 344:Core/Src/main.c ****         // }
 345:Core/Src/main.c ****         current_state = SLEEP;
 346:Core/Src/main.c ****       break;
 347:Core/Src/main.c ****       case OVER_VOLTAGE:
 348:Core/Src/main.c ****         led_blink_nb(100, 100);
 349:Core/Src/main.c **** 
 350:Core/Src/main.c ****         // Disable buck conveter safely
 351:Core/Src/main.c ****         Disable_buck_converter();
 352:Core/Src/main.c **** 
 353:Core/Src/main.c ****         // Check for save voltage
 354:Core/Src/main.c ****         if(input_voltage_mv < MAX_VOLTAGE){
 355:Core/Src/main.c ****           current_state = INIT;
 356:Core/Src/main.c ****         }
 357:Core/Src/main.c ****       break;
 358:Core/Src/main.c ****       case SLEEP:
 359:Core/Src/main.c **** 
 360:Core/Src/main.c ****         // Disable LED
 361:Core/Src/main.c ****         HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 362:Core/Src/main.c **** 
 363:Core/Src/main.c ****         // Check if input voltage is above 2 V and enable timer interrupt
 364:Core/Src/main.c **** 
 365:Core/Src/main.c ****         // Reconfigure GPIO pins for sleep mode: EN1_Pin EN2_Pin PG_Pin BUCK_EN_Pin
 366:Core/Src/main.c ****         // GPIO_InitTypeDef GPIO_InitStruct;
 367:Core/Src/main.c ****         // GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|PG_Pin|BUCK_EN_Pin;
 368:Core/Src/main.c ****         // GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 369:Core/Src/main.c ****         // GPIO_InitStruct.Pull = GPIO_NOPULL;
 370:Core/Src/main.c ****         // HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 371:Core/Src/main.c ****         
 372:Core/Src/main.c ****         // Disable the systick interrupt
 373:Core/Src/main.c ****         HAL_SuspendTick();
 374:Core/Src/main.c **** 
 375:Core/Src/main.c ****         // Enter Stop Mode
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 8


 376:Core/Src/main.c ****         HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
 377:Core/Src/main.c **** 
 378:Core/Src/main.c ****         // Change state
 379:Core/Src/main.c ****         current_state = INIT;
 380:Core/Src/main.c **** 
 381:Core/Src/main.c ****       break;
 382:Core/Src/main.c ****       default:
 383:Core/Src/main.c ****       current_state = INIT;
 384:Core/Src/main.c ****       break;
 385:Core/Src/main.c ****     }
 386:Core/Src/main.c **** 
 387:Core/Src/main.c ****     if(send_status){
 388:Core/Src/main.c ****       send_status = 0;
 389:Core/Src/main.c ****       uint8_t length = 12;
 390:Core/Src/main.c ****       uint8_t buffer [length];
 391:Core/Src/main.c ****       buffer [0] = 0x02;
 392:Core/Src/main.c ****       buffer [1] = length;
 393:Core/Src/main.c ****       buffer [2] = (input_voltage_mv >> 8);
 394:Core/Src/main.c ****       buffer [3] = (uint8_t)(input_voltage_mv);
 395:Core/Src/main.c ****       buffer [4] = (buck_output_voltage_mv >> 8);
 396:Core/Src/main.c ****       buffer [5] = (uint8_t)(buck_output_voltage_mv);
 397:Core/Src/main.c ****       buffer [6] = (buck_current_ma >> 8);
 398:Core/Src/main.c ****       buffer [7] = (uint8_t)(buck_current_ma);
 399:Core/Src/main.c ****       buffer [8] = (supply_voltage_mv >> 8);
 400:Core/Src/main.c ****       buffer [9] = (uint8_t)(supply_voltage_mv);
 401:Core/Src/main.c ****       buffer [10] = pid_result;
 402:Core/Src/main.c ****       buffer [11] = calculate_crc_xor(buffer, length-1);//0xFF;
 403:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, buffer, length, 100);
 404:Core/Src/main.c ****     }
 405:Core/Src/main.c **** 
 406:Core/Src/main.c ****   }
 407:Core/Src/main.c ****   /* USER CODE END 3 */
 408:Core/Src/main.c **** }
 409:Core/Src/main.c **** 
 410:Core/Src/main.c **** /**
 411:Core/Src/main.c ****   * @brief System Clock Configuration
 412:Core/Src/main.c ****   * @retval None
 413:Core/Src/main.c ****   */
 414:Core/Src/main.c **** void SystemClock_Config(void)
 415:Core/Src/main.c **** {
 416:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 417:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 418:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 419:Core/Src/main.c **** 
 420:Core/Src/main.c ****   /** Configure the main internal regulator output voltage
 421:Core/Src/main.c ****   */
 422:Core/Src/main.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 423:Core/Src/main.c **** 
 424:Core/Src/main.c ****   /** Initializes the RCC Oscillators according to the specified parameters
 425:Core/Src/main.c ****   * in the RCC_OscInitTypeDef structure.
 426:Core/Src/main.c ****   */
 427:Core/Src/main.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 428:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 429:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 430:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 431:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 432:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 9


 433:Core/Src/main.c ****   {
 434:Core/Src/main.c ****     Error_Handler();
 435:Core/Src/main.c ****   }
 436:Core/Src/main.c **** 
 437:Core/Src/main.c ****   /** Initializes the CPU, AHB and APB buses clocks
 438:Core/Src/main.c ****   */
 439:Core/Src/main.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 440:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 441:Core/Src/main.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 442:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 443:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 444:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 445:Core/Src/main.c **** 
 446:Core/Src/main.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 447:Core/Src/main.c ****   {
 448:Core/Src/main.c ****     Error_Handler();
 449:Core/Src/main.c ****   }
 450:Core/Src/main.c ****   PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 451:Core/Src/main.c ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 452:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 453:Core/Src/main.c ****   {
 454:Core/Src/main.c ****     Error_Handler();
 455:Core/Src/main.c ****   }
 456:Core/Src/main.c **** }
 457:Core/Src/main.c **** 
 458:Core/Src/main.c **** /**
 459:Core/Src/main.c ****   * @brief ADC Initialization Function
 460:Core/Src/main.c ****   * @param None
 461:Core/Src/main.c ****   * @retval None
 462:Core/Src/main.c ****   */
 463:Core/Src/main.c **** static void MX_ADC_Init(void)
 464:Core/Src/main.c **** {
 465:Core/Src/main.c **** 
 466:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 0 */
 467:Core/Src/main.c **** 
 468:Core/Src/main.c ****   /* USER CODE END ADC_Init 0 */
 469:Core/Src/main.c **** 
 470:Core/Src/main.c ****   ADC_ChannelConfTypeDef sConfig = {0};
 471:Core/Src/main.c **** 
 472:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 1 */
 473:Core/Src/main.c **** 
 474:Core/Src/main.c ****   /* USER CODE END ADC_Init 1 */
 475:Core/Src/main.c **** 
 476:Core/Src/main.c ****   /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of con
 477:Core/Src/main.c ****   */
 478:Core/Src/main.c ****   hadc.Instance = ADC1;
 479:Core/Src/main.c ****   hadc.Init.OversamplingMode = DISABLE;
 480:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 481:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 482:Core/Src/main.c ****   hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 483:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 484:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 485:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 486:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 487:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 488:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 489:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 10


 490:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 491:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 492:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 493:Core/Src/main.c ****   hadc.Init.LowPowerFrequencyMode = ENABLE;
 494:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 495:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 496:Core/Src/main.c ****   {
 497:Core/Src/main.c ****     Error_Handler();
 498:Core/Src/main.c ****   }
 499:Core/Src/main.c **** 
 500:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 501:Core/Src/main.c ****   */
 502:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_5;
 503:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 504:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 505:Core/Src/main.c ****   {
 506:Core/Src/main.c ****     Error_Handler();
 507:Core/Src/main.c ****   }
 508:Core/Src/main.c **** 
 509:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 510:Core/Src/main.c ****   */
 511:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_6;
 512:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 513:Core/Src/main.c ****   {
 514:Core/Src/main.c ****     Error_Handler();
 515:Core/Src/main.c ****   }
 516:Core/Src/main.c **** 
 517:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 518:Core/Src/main.c ****   */
 519:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_7;
 520:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 521:Core/Src/main.c ****   {
 522:Core/Src/main.c ****     Error_Handler();
 523:Core/Src/main.c ****   }
 524:Core/Src/main.c **** 
 525:Core/Src/main.c ****   /** Configure for the selected ADC regular channel to be converted.
 526:Core/Src/main.c ****   */
 527:Core/Src/main.c ****   sConfig.Channel = ADC_CHANNEL_VREFINT;
 528:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 529:Core/Src/main.c ****   {
 530:Core/Src/main.c ****     Error_Handler();
 531:Core/Src/main.c ****   }
 532:Core/Src/main.c ****   /* USER CODE BEGIN ADC_Init 2 */
 533:Core/Src/main.c **** 
 534:Core/Src/main.c ****   /* USER CODE END ADC_Init 2 */
 535:Core/Src/main.c **** 
 536:Core/Src/main.c **** }
 537:Core/Src/main.c **** 
 538:Core/Src/main.c **** /**
 539:Core/Src/main.c ****   * @brief SPI1 Initialization Function
 540:Core/Src/main.c ****   * @param None
 541:Core/Src/main.c ****   * @retval None
 542:Core/Src/main.c ****   */
 543:Core/Src/main.c **** static void MX_SPI1_Init(void)
 544:Core/Src/main.c **** {
 545:Core/Src/main.c **** 
 546:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 0 */
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 11


 547:Core/Src/main.c **** 
 548:Core/Src/main.c ****   /* USER CODE END SPI1_Init 0 */
 549:Core/Src/main.c **** 
 550:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 1 */
 551:Core/Src/main.c **** 
 552:Core/Src/main.c ****   /* USER CODE END SPI1_Init 1 */
 553:Core/Src/main.c ****   /* SPI1 parameter configuration*/
 554:Core/Src/main.c ****   hspi1.Instance = SPI1;
 555:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 556:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 557:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 558:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 559:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 560:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 561:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 562:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 563:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 564:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 565:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 566:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 567:Core/Src/main.c ****   {
 568:Core/Src/main.c ****     Error_Handler();
 569:Core/Src/main.c ****   }
 570:Core/Src/main.c ****   /* USER CODE BEGIN SPI1_Init 2 */
 571:Core/Src/main.c **** 
 572:Core/Src/main.c ****   /* USER CODE END SPI1_Init 2 */
 573:Core/Src/main.c **** 
 574:Core/Src/main.c **** }
 575:Core/Src/main.c **** 
 576:Core/Src/main.c **** /**
 577:Core/Src/main.c ****   * @brief TIM2 Initialization Function
 578:Core/Src/main.c ****   * @param None
 579:Core/Src/main.c ****   * @retval None
 580:Core/Src/main.c ****   */
 581:Core/Src/main.c **** static void MX_TIM2_Init(void)
 582:Core/Src/main.c **** {
 583:Core/Src/main.c **** 
 584:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 0 */
 585:Core/Src/main.c **** 
 586:Core/Src/main.c ****   /* USER CODE END TIM2_Init 0 */
 587:Core/Src/main.c **** 
 588:Core/Src/main.c ****   TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 589:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 590:Core/Src/main.c **** 
 591:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 1 */
 592:Core/Src/main.c **** 
 593:Core/Src/main.c ****   /* USER CODE END TIM2_Init 1 */
 594:Core/Src/main.c ****   htim2.Instance = TIM2;
 595:Core/Src/main.c ****   htim2.Init.Prescaler = 2000;
 596:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 597:Core/Src/main.c ****   htim2.Init.Period = 1000;
 598:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 599:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 600:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 601:Core/Src/main.c ****   {
 602:Core/Src/main.c ****     Error_Handler();
 603:Core/Src/main.c ****   }
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 12


 604:Core/Src/main.c ****   sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 605:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 606:Core/Src/main.c ****   {
 607:Core/Src/main.c ****     Error_Handler();
 608:Core/Src/main.c ****   }
 609:Core/Src/main.c ****   sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 610:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 611:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 612:Core/Src/main.c ****   {
 613:Core/Src/main.c ****     Error_Handler();
 614:Core/Src/main.c ****   }
 615:Core/Src/main.c ****   /* USER CODE BEGIN TIM2_Init 2 */
 616:Core/Src/main.c **** 
 617:Core/Src/main.c ****   /* USER CODE END TIM2_Init 2 */
 618:Core/Src/main.c **** 
 619:Core/Src/main.c **** }
 620:Core/Src/main.c **** 
 621:Core/Src/main.c **** /**
 622:Core/Src/main.c ****   * @brief USART2 Initialization Function
 623:Core/Src/main.c ****   * @param None
 624:Core/Src/main.c ****   * @retval None
 625:Core/Src/main.c ****   */
 626:Core/Src/main.c **** static void MX_USART2_UART_Init(void)
 627:Core/Src/main.c **** {
 628:Core/Src/main.c **** 
 629:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 0 */
 630:Core/Src/main.c **** 
 631:Core/Src/main.c ****   /* USER CODE END USART2_Init 0 */
 632:Core/Src/main.c **** 
 633:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 1 */
 634:Core/Src/main.c **** 
 635:Core/Src/main.c ****   /* USER CODE END USART2_Init 1 */
 636:Core/Src/main.c ****   huart2.Instance = USART2;
 637:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 638:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 639:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 640:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 641:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 642:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 643:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 644:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 645:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 646:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 647:Core/Src/main.c ****   {
 648:Core/Src/main.c ****     Error_Handler();
 649:Core/Src/main.c ****   }
 650:Core/Src/main.c ****   /* USER CODE BEGIN USART2_Init 2 */
 651:Core/Src/main.c **** 
 652:Core/Src/main.c ****   /* USER CODE END USART2_Init 2 */
 653:Core/Src/main.c **** 
 654:Core/Src/main.c **** }
 655:Core/Src/main.c **** 
 656:Core/Src/main.c **** /**
 657:Core/Src/main.c ****   * @brief GPIO Initialization Function
 658:Core/Src/main.c ****   * @param None
 659:Core/Src/main.c ****   * @retval None
 660:Core/Src/main.c ****   */
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 13


 661:Core/Src/main.c **** static void MX_GPIO_Init(void)
 662:Core/Src/main.c **** {
  26              		.loc 1 662 1 view -0
  27              		.cfi_startproc
  28              		@ args = 0, pretend = 0, frame = 32
  29              		@ frame_needed = 0, uses_anonymous_args = 0
  30 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  31              		.cfi_def_cfa_offset 20
  32              		.cfi_offset 4, -20
  33              		.cfi_offset 5, -16
  34              		.cfi_offset 6, -12
  35              		.cfi_offset 7, -8
  36              		.cfi_offset 14, -4
  37 0002 C646     		mov	lr, r8
  38 0004 00B5     		push	{lr}
  39              		.cfi_def_cfa_offset 24
  40              		.cfi_offset 8, -24
  41 0006 88B0     		sub	sp, sp, #32
  42              		.cfi_def_cfa_offset 56
 663:Core/Src/main.c ****   GPIO_InitTypeDef GPIO_InitStruct = {0};
  43              		.loc 1 663 3 view .LVU1
  44              		.loc 1 663 20 is_stmt 0 view .LVU2
  45 0008 1422     		movs	r2, #20
  46 000a 0021     		movs	r1, #0
  47 000c 03A8     		add	r0, sp, #12
  48 000e FFF7FEFF 		bl	memset
  49              	.LVL0:
 664:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_1 */
 665:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_1 */
 666:Core/Src/main.c **** 
 667:Core/Src/main.c ****   /* GPIO Ports Clock Enable */
 668:Core/Src/main.c ****   __HAL_RCC_GPIOC_CLK_ENABLE();
  50              		.loc 1 668 3 is_stmt 1 view .LVU3
  51              	.LBB4:
  52              		.loc 1 668 3 view .LVU4
  53              		.loc 1 668 3 view .LVU5
  54 0012 294B     		ldr	r3, .L2
  55 0014 D96A     		ldr	r1, [r3, #44]
  56 0016 0422     		movs	r2, #4
  57 0018 1143     		orrs	r1, r2
  58 001a D962     		str	r1, [r3, #44]
  59              		.loc 1 668 3 view .LVU6
  60 001c D96A     		ldr	r1, [r3, #44]
  61 001e 0A40     		ands	r2, r1
  62 0020 0092     		str	r2, [sp]
  63              		.loc 1 668 3 view .LVU7
  64 0022 009A     		ldr	r2, [sp]
  65              	.LBE4:
  66              		.loc 1 668 3 view .LVU8
 669:Core/Src/main.c ****   __HAL_RCC_GPIOA_CLK_ENABLE();
  67              		.loc 1 669 3 view .LVU9
  68              	.LBB5:
  69              		.loc 1 669 3 view .LVU10
  70              		.loc 1 669 3 view .LVU11
  71 0024 DA6A     		ldr	r2, [r3, #44]
  72 0026 0125     		movs	r5, #1
  73 0028 2A43     		orrs	r2, r5
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 14


  74 002a DA62     		str	r2, [r3, #44]
  75              		.loc 1 669 3 view .LVU12
  76 002c DA6A     		ldr	r2, [r3, #44]
  77 002e 2A40     		ands	r2, r5
  78 0030 0192     		str	r2, [sp, #4]
  79              		.loc 1 669 3 view .LVU13
  80 0032 019A     		ldr	r2, [sp, #4]
  81              	.LBE5:
  82              		.loc 1 669 3 view .LVU14
 670:Core/Src/main.c ****   __HAL_RCC_GPIOB_CLK_ENABLE();
  83              		.loc 1 670 3 view .LVU15
  84              	.LBB6:
  85              		.loc 1 670 3 view .LVU16
  86              		.loc 1 670 3 view .LVU17
  87 0034 D96A     		ldr	r1, [r3, #44]
  88 0036 0222     		movs	r2, #2
  89 0038 1143     		orrs	r1, r2
  90 003a D962     		str	r1, [r3, #44]
  91              		.loc 1 670 3 view .LVU18
  92 003c DB6A     		ldr	r3, [r3, #44]
  93 003e 1A40     		ands	r2, r3
  94 0040 0292     		str	r2, [sp, #8]
  95              		.loc 1 670 3 view .LVU19
  96 0042 029B     		ldr	r3, [sp, #8]
  97              	.LBE6:
  98              		.loc 1 670 3 view .LVU20
 671:Core/Src/main.c **** 
 672:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 673:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
  99              		.loc 1 673 3 view .LVU21
 100 0044 8024     		movs	r4, #128
 101 0046 E401     		lsls	r4, r4, #7
 102 0048 1C4B     		ldr	r3, .L2+4
 103 004a 9846     		mov	r8, r3
 104 004c 0022     		movs	r2, #0
 105 004e 2100     		movs	r1, r4
 106 0050 1800     		movs	r0, r3
 107 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 108              	.LVL1:
 674:Core/Src/main.c **** 
 675:Core/Src/main.c ****   /*Configure GPIO pin Output Level */
 676:Core/Src/main.c ****   HAL_GPIO_WritePin(GPIOA, EN1_Pin|EN2_Pin|PG_Pin|BUCK_EN_Pin
 109              		.loc 1 676 3 view .LVU22
 110 0056 1A4F     		ldr	r7, .L2+8
 111 0058 A026     		movs	r6, #160
 112 005a F605     		lsls	r6, r6, #23
 113 005c 0022     		movs	r2, #0
 114 005e 3900     		movs	r1, r7
 115 0060 3000     		movs	r0, r6
 116 0062 FFF7FEFF 		bl	HAL_GPIO_WritePin
 117              	.LVL2:
 677:Core/Src/main.c ****                           |SC_Pin, GPIO_PIN_RESET);
 678:Core/Src/main.c **** 
 679:Core/Src/main.c ****   /*Configure GPIO pin : LED_Pin */
 680:Core/Src/main.c ****   GPIO_InitStruct.Pin = LED_Pin;
 118              		.loc 1 680 3 view .LVU23
 119              		.loc 1 680 23 is_stmt 0 view .LVU24
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 15


 120 0066 0394     		str	r4, [sp, #12]
 681:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 121              		.loc 1 681 3 is_stmt 1 view .LVU25
 122              		.loc 1 681 24 is_stmt 0 view .LVU26
 123 0068 0495     		str	r5, [sp, #16]
 682:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 124              		.loc 1 682 3 is_stmt 1 view .LVU27
 125              		.loc 1 682 24 is_stmt 0 view .LVU28
 126 006a 0024     		movs	r4, #0
 127 006c 0594     		str	r4, [sp, #20]
 683:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 128              		.loc 1 683 3 is_stmt 1 view .LVU29
 129              		.loc 1 683 25 is_stmt 0 view .LVU30
 130 006e 0694     		str	r4, [sp, #24]
 684:Core/Src/main.c ****   HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 131              		.loc 1 684 3 is_stmt 1 view .LVU31
 132 0070 03A9     		add	r1, sp, #12
 133 0072 4046     		mov	r0, r8
 134 0074 FFF7FEFF 		bl	HAL_GPIO_Init
 135              	.LVL3:
 685:Core/Src/main.c **** 
 686:Core/Src/main.c ****   /*Configure GPIO pins : EN1_Pin EN2_Pin PG_Pin BUCK_EN_Pin
 687:Core/Src/main.c ****                            SC_Pin */
 688:Core/Src/main.c ****   GPIO_InitStruct.Pin = EN1_Pin|EN2_Pin|PG_Pin|BUCK_EN_Pin
 136              		.loc 1 688 3 view .LVU32
 137              		.loc 1 688 23 is_stmt 0 view .LVU33
 138 0078 0397     		str	r7, [sp, #12]
 689:Core/Src/main.c ****                           |SC_Pin;
 690:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 139              		.loc 1 690 3 is_stmt 1 view .LVU34
 140              		.loc 1 690 24 is_stmt 0 view .LVU35
 141 007a 0495     		str	r5, [sp, #16]
 691:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 142              		.loc 1 691 3 is_stmt 1 view .LVU36
 143              		.loc 1 691 24 is_stmt 0 view .LVU37
 144 007c 0594     		str	r4, [sp, #20]
 692:Core/Src/main.c ****   GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 145              		.loc 1 692 3 is_stmt 1 view .LVU38
 146              		.loc 1 692 25 is_stmt 0 view .LVU39
 147 007e 0694     		str	r4, [sp, #24]
 693:Core/Src/main.c ****   HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 148              		.loc 1 693 3 is_stmt 1 view .LVU40
 149 0080 03A9     		add	r1, sp, #12
 150 0082 3000     		movs	r0, r6
 151 0084 FFF7FEFF 		bl	HAL_GPIO_Init
 152              	.LVL4:
 694:Core/Src/main.c **** 
 695:Core/Src/main.c ****   /*Configure GPIO pin : INT_Pin */
 696:Core/Src/main.c ****   GPIO_InitStruct.Pin = INT_Pin;
 153              		.loc 1 696 3 view .LVU41
 154              		.loc 1 696 23 is_stmt 0 view .LVU42
 155 0088 8023     		movs	r3, #128
 156 008a DB00     		lsls	r3, r3, #3
 157 008c 0393     		str	r3, [sp, #12]
 697:Core/Src/main.c ****   GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 158              		.loc 1 697 3 is_stmt 1 view .LVU43
 159              		.loc 1 697 24 is_stmt 0 view .LVU44
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 16


 160 008e 8823     		movs	r3, #136
 161 0090 5B03     		lsls	r3, r3, #13
 162 0092 0493     		str	r3, [sp, #16]
 698:Core/Src/main.c ****   GPIO_InitStruct.Pull = GPIO_NOPULL;
 163              		.loc 1 698 3 is_stmt 1 view .LVU45
 164              		.loc 1 698 24 is_stmt 0 view .LVU46
 165 0094 0594     		str	r4, [sp, #20]
 699:Core/Src/main.c ****   HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 166              		.loc 1 699 3 is_stmt 1 view .LVU47
 167 0096 03A9     		add	r1, sp, #12
 168 0098 3000     		movs	r0, r6
 169 009a FFF7FEFF 		bl	HAL_GPIO_Init
 170              	.LVL5:
 700:Core/Src/main.c **** 
 701:Core/Src/main.c ****   /* EXTI interrupt init*/
 702:Core/Src/main.c ****   HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 171              		.loc 1 702 3 view .LVU48
 172 009e 0022     		movs	r2, #0
 173 00a0 0021     		movs	r1, #0
 174 00a2 0720     		movs	r0, #7
 175 00a4 FFF7FEFF 		bl	HAL_NVIC_SetPriority
 176              	.LVL6:
 703:Core/Src/main.c ****   HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 177              		.loc 1 703 3 view .LVU49
 178 00a8 0720     		movs	r0, #7
 179 00aa FFF7FEFF 		bl	HAL_NVIC_EnableIRQ
 180              	.LVL7:
 704:Core/Src/main.c **** 
 705:Core/Src/main.c **** /* USER CODE BEGIN MX_GPIO_Init_2 */
 706:Core/Src/main.c **** /* USER CODE END MX_GPIO_Init_2 */
 707:Core/Src/main.c **** }
 181              		.loc 1 707 1 is_stmt 0 view .LVU50
 182 00ae 08B0     		add	sp, sp, #32
 183              		@ sp needed
 184 00b0 80BC     		pop	{r7}
 185 00b2 B846     		mov	r8, r7
 186 00b4 F0BD     		pop	{r4, r5, r6, r7, pc}
 187              	.L3:
 188 00b6 C046     		.align	2
 189              	.L2:
 190 00b8 00100240 		.word	1073876992
 191 00bc 00080050 		.word	1342179328
 192 00c0 13420000 		.word	16915
 193              		.cfi_endproc
 194              	.LFE46:
 196              		.section	.text.load_switch_enable,"ax",%progbits
 197              		.align	1
 198              		.global	load_switch_enable
 199              		.syntax unified
 200              		.code	16
 201              		.thumb_func
 203              	load_switch_enable:
 204              	.LFB47:
 708:Core/Src/main.c **** 
 709:Core/Src/main.c **** /* USER CODE BEGIN 4 */
 710:Core/Src/main.c **** 
 711:Core/Src/main.c **** // *** Load Switch functions *** //
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 17


 712:Core/Src/main.c **** // Enable load switch 1 and 2
 713:Core/Src/main.c **** void load_switch_enable(void){
 205              		.loc 1 713 30 is_stmt 1 view -0
 206              		.cfi_startproc
 207              		@ args = 0, pretend = 0, frame = 0
 208              		@ frame_needed = 0, uses_anonymous_args = 0
 209 0000 10B5     		push	{r4, lr}
 210              		.cfi_def_cfa_offset 8
 211              		.cfi_offset 4, -8
 212              		.cfi_offset 14, -4
 714:Core/Src/main.c ****   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 213              		.loc 1 714 3 view .LVU52
 214 0002 A024     		movs	r4, #160
 215 0004 E405     		lsls	r4, r4, #23
 216 0006 0122     		movs	r2, #1
 217 0008 0121     		movs	r1, #1
 218 000a 2000     		movs	r0, r4
 219 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 220              	.LVL8:
 715:Core/Src/main.c ****   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 221              		.loc 1 715 3 view .LVU53
 222 0010 0122     		movs	r2, #1
 223 0012 0221     		movs	r1, #2
 224 0014 2000     		movs	r0, r4
 225 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 226              	.LVL9:
 716:Core/Src/main.c **** }
 227              		.loc 1 716 1 is_stmt 0 view .LVU54
 228              		@ sp needed
 229 001a 10BD     		pop	{r4, pc}
 230              		.cfi_endproc
 231              	.LFE47:
 233              		.section	.text.load_switch_disable,"ax",%progbits
 234              		.align	1
 235              		.global	load_switch_disable
 236              		.syntax unified
 237              		.code	16
 238              		.thumb_func
 240              	load_switch_disable:
 241              	.LFB48:
 717:Core/Src/main.c **** 
 718:Core/Src/main.c **** // Disable load switch 1 and 2
 719:Core/Src/main.c **** void load_switch_disable(void){
 242              		.loc 1 719 31 is_stmt 1 view -0
 243              		.cfi_startproc
 244              		@ args = 0, pretend = 0, frame = 0
 245              		@ frame_needed = 0, uses_anonymous_args = 0
 246 0000 10B5     		push	{r4, lr}
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 4, -8
 249              		.cfi_offset 14, -4
 720:Core/Src/main.c ****   HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 250              		.loc 1 720 3 view .LVU56
 251 0002 A024     		movs	r4, #160
 252 0004 E405     		lsls	r4, r4, #23
 253 0006 0022     		movs	r2, #0
 254 0008 0121     		movs	r1, #1
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 18


 255 000a 2000     		movs	r0, r4
 256 000c FFF7FEFF 		bl	HAL_GPIO_WritePin
 257              	.LVL10:
 721:Core/Src/main.c ****   HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 258              		.loc 1 721 3 view .LVU57
 259 0010 0022     		movs	r2, #0
 260 0012 0221     		movs	r1, #2
 261 0014 2000     		movs	r0, r4
 262 0016 FFF7FEFF 		bl	HAL_GPIO_WritePin
 263              	.LVL11:
 722:Core/Src/main.c **** }
 264              		.loc 1 722 1 is_stmt 0 view .LVU58
 265              		@ sp needed
 266 001a 10BD     		pop	{r4, pc}
 267              		.cfi_endproc
 268              	.LFE48:
 270              		.section	.text.led_blink,"ax",%progbits
 271              		.align	1
 272              		.global	led_blink
 273              		.syntax unified
 274              		.code	16
 275              		.thumb_func
 277              	led_blink:
 278              	.LVL12:
 279              	.LFB49:
 723:Core/Src/main.c **** 
 724:Core/Src/main.c **** void led_blink(uint16_t time_delay_1, uint16_t time_delay_2){
 280              		.loc 1 724 61 is_stmt 1 view -0
 281              		.cfi_startproc
 282              		@ args = 0, pretend = 0, frame = 0
 283              		@ frame_needed = 0, uses_anonymous_args = 0
 284              		.loc 1 724 61 is_stmt 0 view .LVU60
 285 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 286              		.cfi_def_cfa_offset 24
 287              		.cfi_offset 3, -24
 288              		.cfi_offset 4, -20
 289              		.cfi_offset 5, -16
 290              		.cfi_offset 6, -12
 291              		.cfi_offset 7, -8
 292              		.cfi_offset 14, -4
 293 0002 0500     		movs	r5, r0
 294 0004 0C00     		movs	r4, r1
 725:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 295              		.loc 1 725 3 is_stmt 1 view .LVU61
 296 0006 8027     		movs	r7, #128
 297 0008 FF01     		lsls	r7, r7, #7
 298 000a 094E     		ldr	r6, .L7
 299 000c 0022     		movs	r2, #0
 300 000e 3900     		movs	r1, r7
 301              	.LVL13:
 302              		.loc 1 725 3 is_stmt 0 view .LVU62
 303 0010 3000     		movs	r0, r6
 304              	.LVL14:
 305              		.loc 1 725 3 view .LVU63
 306 0012 FFF7FEFF 		bl	HAL_GPIO_WritePin
 307              	.LVL15:
 726:Core/Src/main.c ****   HAL_Delay(time_delay_1);
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 19


 308              		.loc 1 726 3 is_stmt 1 view .LVU64
 309 0016 2800     		movs	r0, r5
 310 0018 FFF7FEFF 		bl	HAL_Delay
 311              	.LVL16:
 727:Core/Src/main.c ****   HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 312              		.loc 1 727 3 view .LVU65
 313 001c 0122     		movs	r2, #1
 314 001e 3900     		movs	r1, r7
 315 0020 3000     		movs	r0, r6
 316 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 317              	.LVL17:
 728:Core/Src/main.c ****   HAL_Delay(time_delay_2);
 318              		.loc 1 728 3 view .LVU66
 319 0026 2000     		movs	r0, r4
 320 0028 FFF7FEFF 		bl	HAL_Delay
 321              	.LVL18:
 729:Core/Src/main.c **** }
 322              		.loc 1 729 1 is_stmt 0 view .LVU67
 323              		@ sp needed
 324 002c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 325              	.L8:
 326 002e C046     		.align	2
 327              	.L7:
 328 0030 00080050 		.word	1342179328
 329              		.cfi_endproc
 330              	.LFE49:
 332              		.section	.text.led_blink_nb,"ax",%progbits
 333              		.align	1
 334              		.global	led_blink_nb
 335              		.syntax unified
 336              		.code	16
 337              		.thumb_func
 339              	led_blink_nb:
 340              	.LVL19:
 341              	.LFB50:
 730:Core/Src/main.c **** 
 731:Core/Src/main.c **** void led_blink_nb(uint16_t time_delay_1, uint16_t time_delay_2){
 342              		.loc 1 731 64 is_stmt 1 view -0
 343              		.cfi_startproc
 344              		@ args = 0, pretend = 0, frame = 0
 345              		@ frame_needed = 0, uses_anonymous_args = 0
 346              		.loc 1 731 64 is_stmt 0 view .LVU69
 347 0000 70B5     		push	{r4, r5, r6, lr}
 348              		.cfi_def_cfa_offset 16
 349              		.cfi_offset 4, -16
 350              		.cfi_offset 5, -12
 351              		.cfi_offset 6, -8
 352              		.cfi_offset 14, -4
 353 0002 0500     		movs	r5, r0
 354 0004 0C00     		movs	r4, r1
 732:Core/Src/main.c ****   uint32_t currentTime = HAL_GetTick();  // Get current timestamp (implementation-dependent)
 355              		.loc 1 732 3 is_stmt 1 view .LVU70
 356              		.loc 1 732 26 is_stmt 0 view .LVU71
 357 0006 FFF7FEFF 		bl	HAL_GetTick
 358              	.LVL20:
 733:Core/Src/main.c **** 
 734:Core/Src/main.c ****   if (isOn) {
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 20


 359              		.loc 1 734 3 is_stmt 1 view .LVU72
 360              		.loc 1 734 7 is_stmt 0 view .LVU73
 361 000a 134A     		ldr	r2, .L13
 362 000c 1278     		ldrb	r2, [r2]
 363              		.loc 1 734 6 view .LVU74
 364 000e 002A     		cmp	r2, #0
 365 0010 11D0     		beq	.L10
 735:Core/Src/main.c ****     if (currentTime - timestamp >= time_delay_1) {
 366              		.loc 1 735 5 is_stmt 1 view .LVU75
 367              		.loc 1 735 21 is_stmt 0 view .LVU76
 368 0012 124A     		ldr	r2, .L13+4
 369 0014 1268     		ldr	r2, [r2]
 370 0016 821A     		subs	r2, r0, r2
 371              		.loc 1 735 8 view .LVU77
 372 0018 AA42     		cmp	r2, r5
 373 001a 00D2     		bcs	.L12
 374              	.LVL21:
 375              	.L9:
 736:Core/Src/main.c ****       isOn = 0;
 737:Core/Src/main.c ****       timestamp = currentTime;
 738:Core/Src/main.c ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 739:Core/Src/main.c ****     }
 740:Core/Src/main.c ****   } else {
 741:Core/Src/main.c ****     if (currentTime - timestamp >= time_delay_2) {
 742:Core/Src/main.c ****       isOn = 1;
 743:Core/Src/main.c ****       timestamp = currentTime;
 744:Core/Src/main.c ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 745:Core/Src/main.c ****     }
 746:Core/Src/main.c ****   }
 747:Core/Src/main.c **** }
 376              		.loc 1 747 1 view .LVU78
 377              		@ sp needed
 378 001c 70BD     		pop	{r4, r5, r6, pc}
 379              	.LVL22:
 380              	.L12:
 736:Core/Src/main.c ****       isOn = 0;
 381              		.loc 1 736 7 is_stmt 1 view .LVU79
 736:Core/Src/main.c ****       isOn = 0;
 382              		.loc 1 736 12 is_stmt 0 view .LVU80
 383 001e 0E4A     		ldr	r2, .L13
 384 0020 0021     		movs	r1, #0
 385 0022 1170     		strb	r1, [r2]
 737:Core/Src/main.c ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 386              		.loc 1 737 7 is_stmt 1 view .LVU81
 737:Core/Src/main.c ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 387              		.loc 1 737 17 is_stmt 0 view .LVU82
 388 0024 0D4A     		ldr	r2, .L13+4
 389 0026 1060     		str	r0, [r2]
 738:Core/Src/main.c ****     }
 390              		.loc 1 738 7 is_stmt 1 view .LVU83
 391 0028 8031     		adds	r1, r1, #128
 392 002a 0022     		movs	r2, #0
 393 002c C901     		lsls	r1, r1, #7
 394 002e 0C48     		ldr	r0, .L13+8
 395              	.LVL23:
 738:Core/Src/main.c ****     }
 396              		.loc 1 738 7 is_stmt 0 view .LVU84
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 21


 397 0030 FFF7FEFF 		bl	HAL_GPIO_WritePin
 398              	.LVL24:
 738:Core/Src/main.c ****     }
 399              		.loc 1 738 7 view .LVU85
 400 0034 F2E7     		b	.L9
 401              	.LVL25:
 402              	.L10:
 741:Core/Src/main.c ****       isOn = 1;
 403              		.loc 1 741 5 is_stmt 1 view .LVU86
 741:Core/Src/main.c ****       isOn = 1;
 404              		.loc 1 741 21 is_stmt 0 view .LVU87
 405 0036 094A     		ldr	r2, .L13+4
 406 0038 1268     		ldr	r2, [r2]
 407 003a 821A     		subs	r2, r0, r2
 741:Core/Src/main.c ****       isOn = 1;
 408              		.loc 1 741 8 view .LVU88
 409 003c A242     		cmp	r2, r4
 410 003e EDD3     		bcc	.L9
 742:Core/Src/main.c ****       timestamp = currentTime;
 411              		.loc 1 742 7 is_stmt 1 view .LVU89
 742:Core/Src/main.c ****       timestamp = currentTime;
 412              		.loc 1 742 12 is_stmt 0 view .LVU90
 413 0040 054A     		ldr	r2, .L13
 414 0042 0121     		movs	r1, #1
 415 0044 1170     		strb	r1, [r2]
 743:Core/Src/main.c ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 416              		.loc 1 743 7 is_stmt 1 view .LVU91
 743:Core/Src/main.c ****       HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 417              		.loc 1 743 17 is_stmt 0 view .LVU92
 418 0046 054A     		ldr	r2, .L13+4
 419 0048 1060     		str	r0, [r2]
 744:Core/Src/main.c ****     }
 420              		.loc 1 744 7 is_stmt 1 view .LVU93
 421 004a 7F31     		adds	r1, r1, #127
 422 004c 0122     		movs	r2, #1
 423 004e C901     		lsls	r1, r1, #7
 424 0050 0348     		ldr	r0, .L13+8
 425              	.LVL26:
 744:Core/Src/main.c ****     }
 426              		.loc 1 744 7 is_stmt 0 view .LVU94
 427 0052 FFF7FEFF 		bl	HAL_GPIO_WritePin
 428              	.LVL27:
 429              		.loc 1 747 1 view .LVU95
 430 0056 E1E7     		b	.L9
 431              	.L14:
 432              		.align	2
 433              	.L13:
 434 0058 00000000 		.word	isOn
 435 005c 00000000 		.word	timestamp
 436 0060 00080050 		.word	1342179328
 437              		.cfi_endproc
 438              	.LFE50:
 440              		.section	.text.Enable_buck_converter,"ax",%progbits
 441              		.align	1
 442              		.global	Enable_buck_converter
 443              		.syntax unified
 444              		.code	16
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 22


 445              		.thumb_func
 447              	Enable_buck_converter:
 448              	.LFB52:
 748:Core/Src/main.c **** 
 749:Core/Src/main.c **** // *** WAKE UP *** //
 750:Core/Src/main.c **** void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 751:Core/Src/main.c **** {
 752:Core/Src/main.c ****   //if(GPIO_Pin == INT_Pin)
 753:Core/Src/main.c ****   //{
 754:Core/Src/main.c **** 	  SystemClock_Config();
 755:Core/Src/main.c **** 	  HAL_ResumeTick();
 756:Core/Src/main.c ****   //}
 757:Core/Src/main.c **** }
 758:Core/Src/main.c **** 
 759:Core/Src/main.c **** // *** SAFELY ENABLE/DISABLE BUCK CONVERTER *** //
 760:Core/Src/main.c **** void Enable_buck_converter(void){
 449              		.loc 1 760 33 is_stmt 1 view -0
 450              		.cfi_startproc
 451              		@ args = 0, pretend = 0, frame = 0
 452              		@ frame_needed = 0, uses_anonymous_args = 0
 453 0000 10B5     		push	{r4, lr}
 454              		.cfi_def_cfa_offset 8
 455              		.cfi_offset 4, -8
 456              		.cfi_offset 14, -4
 761:Core/Src/main.c ****   // Enable load switches
 762:Core/Src/main.c ****   load_switch_enable();
 457              		.loc 1 762 3 view .LVU97
 458 0002 FFF7FEFF 		bl	load_switch_enable
 459              	.LVL28:
 763:Core/Src/main.c **** 
 764:Core/Src/main.c ****   HAL_Delay(100);
 460              		.loc 1 764 3 view .LVU98
 461 0006 6420     		movs	r0, #100
 462 0008 FFF7FEFF 		bl	HAL_Delay
 463              	.LVL29:
 765:Core/Src/main.c **** 
 766:Core/Src/main.c ****   // Enable CC/CV buck converter
 767:Core/Src/main.c ****   HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_SET);
 464              		.loc 1 767 3 view .LVU99
 465 000c 8021     		movs	r1, #128
 466 000e A024     		movs	r4, #160
 467 0010 E405     		lsls	r4, r4, #23
 468 0012 0122     		movs	r2, #1
 469 0014 8900     		lsls	r1, r1, #2
 470 0016 2000     		movs	r0, r4
 471 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 472              	.LVL30:
 768:Core/Src/main.c **** 
 769:Core/Src/main.c ****   // Connect input voltage to buck converter
 770:Core/Src/main.c ****   HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, GPIO_PIN_SET);
 473              		.loc 1 770 3 view .LVU100
 474 001c 0122     		movs	r2, #1
 475 001e 1021     		movs	r1, #16
 476 0020 2000     		movs	r0, r4
 477 0022 FFF7FEFF 		bl	HAL_GPIO_WritePin
 478              	.LVL31:
 771:Core/Src/main.c **** }
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 23


 479              		.loc 1 771 1 is_stmt 0 view .LVU101
 480              		@ sp needed
 481 0026 10BD     		pop	{r4, pc}
 482              		.cfi_endproc
 483              	.LFE52:
 485              		.section	.text.Disable_buck_converter,"ax",%progbits
 486              		.align	1
 487              		.global	Disable_buck_converter
 488              		.syntax unified
 489              		.code	16
 490              		.thumb_func
 492              	Disable_buck_converter:
 493              	.LFB53:
 772:Core/Src/main.c **** 
 773:Core/Src/main.c **** 
 774:Core/Src/main.c **** void Disable_buck_converter(void){
 494              		.loc 1 774 34 is_stmt 1 view -0
 495              		.cfi_startproc
 496              		@ args = 0, pretend = 0, frame = 0
 497              		@ frame_needed = 0, uses_anonymous_args = 0
 498 0000 10B5     		push	{r4, lr}
 499              		.cfi_def_cfa_offset 8
 500              		.cfi_offset 4, -8
 501              		.cfi_offset 14, -4
 775:Core/Src/main.c ****     // Disable CC/CV buck converter
 776:Core/Src/main.c ****   HAL_GPIO_WritePin(BUCK_EN_GPIO_Port, BUCK_EN_Pin, GPIO_PIN_RESET);
 502              		.loc 1 776 3 view .LVU103
 503 0002 8021     		movs	r1, #128
 504 0004 A024     		movs	r4, #160
 505 0006 E405     		lsls	r4, r4, #23
 506 0008 0022     		movs	r2, #0
 507 000a 8900     		lsls	r1, r1, #2
 508 000c 2000     		movs	r0, r4
 509 000e FFF7FEFF 		bl	HAL_GPIO_WritePin
 510              	.LVL32:
 777:Core/Src/main.c ****   
 778:Core/Src/main.c ****   // Disconnect input voltage from buck converter
 779:Core/Src/main.c ****   HAL_GPIO_WritePin(PG_GPIO_Port, PG_Pin, GPIO_PIN_RESET);
 511              		.loc 1 779 3 view .LVU104
 512 0012 0022     		movs	r2, #0
 513 0014 1021     		movs	r1, #16
 514 0016 2000     		movs	r0, r4
 515 0018 FFF7FEFF 		bl	HAL_GPIO_WritePin
 516              	.LVL33:
 780:Core/Src/main.c **** 
 781:Core/Src/main.c ****   // Disable load switches
 782:Core/Src/main.c ****   load_switch_disable();
 517              		.loc 1 782 3 view .LVU105
 518 001c FFF7FEFF 		bl	load_switch_disable
 519              	.LVL34:
 783:Core/Src/main.c **** }
 520              		.loc 1 783 1 is_stmt 0 view .LVU106
 521              		@ sp needed
 522 0020 10BD     		pop	{r4, pc}
 523              		.cfi_endproc
 524              	.LFE53:
 526              		.section	.text.HAL_TIM_PeriodElapsedCallback,"ax",%progbits
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 24


 527              		.align	1
 528              		.global	HAL_TIM_PeriodElapsedCallback
 529              		.syntax unified
 530              		.code	16
 531              		.thumb_func
 533              	HAL_TIM_PeriodElapsedCallback:
 534              	.LVL35:
 535              	.LFB54:
 784:Core/Src/main.c **** 
 785:Core/Src/main.c **** // *** TIMER INTEGRATION *** //
 786:Core/Src/main.c **** void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim){
 536              		.loc 1 786 60 is_stmt 1 view -0
 537              		.cfi_startproc
 538              		@ args = 0, pretend = 0, frame = 0
 539              		@ frame_needed = 0, uses_anonymous_args = 0
 540              		@ link register save eliminated.
 787:Core/Src/main.c ****   send_status = 1;
 541              		.loc 1 787 3 view .LVU108
 542              		.loc 1 787 15 is_stmt 0 view .LVU109
 543 0000 014B     		ldr	r3, .L18
 544 0002 0122     		movs	r2, #1
 545 0004 1A70     		strb	r2, [r3]
 788:Core/Src/main.c **** }
 546              		.loc 1 788 1 view .LVU110
 547              		@ sp needed
 548 0006 7047     		bx	lr
 549              	.L19:
 550              		.align	2
 551              	.L18:
 552 0008 00000000 		.word	send_status
 553              		.cfi_endproc
 554              	.LFE54:
 556              		.section	.text.calculate_crc_xor,"ax",%progbits
 557              		.align	1
 558              		.global	calculate_crc_xor
 559              		.syntax unified
 560              		.code	16
 561              		.thumb_func
 563              	calculate_crc_xor:
 564              	.LVL36:
 565              	.LFB55:
 789:Core/Src/main.c **** 
 790:Core/Src/main.c **** 
 791:Core/Src/main.c **** // *** Calculate CRC *** //
 792:Core/Src/main.c **** uint8_t calculate_crc_xor(const uint8_t *data, size_t length) {
 566              		.loc 1 792 63 is_stmt 1 view -0
 567              		.cfi_startproc
 568              		@ args = 0, pretend = 0, frame = 0
 569              		@ frame_needed = 0, uses_anonymous_args = 0
 570              		.loc 1 792 63 is_stmt 0 view .LVU112
 571 0000 10B5     		push	{r4, lr}
 572              		.cfi_def_cfa_offset 8
 573              		.cfi_offset 4, -8
 574              		.cfi_offset 14, -4
 575 0002 0400     		movs	r4, r0
 793:Core/Src/main.c ****     uint8_t crc = 0;
 576              		.loc 1 793 5 is_stmt 1 view .LVU113
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 25


 577              	.LVL37:
 794:Core/Src/main.c ****     size_t i;
 578              		.loc 1 794 5 view .LVU114
 795:Core/Src/main.c **** 
 796:Core/Src/main.c ****     for (i = 0; i < length; i++) {
 579              		.loc 1 796 5 view .LVU115
 580              		.loc 1 796 12 is_stmt 0 view .LVU116
 581 0004 0023     		movs	r3, #0
 793:Core/Src/main.c ****     size_t i;
 582              		.loc 1 793 13 view .LVU117
 583 0006 0020     		movs	r0, #0
 584              	.LVL38:
 585              		.loc 1 796 5 view .LVU118
 586 0008 02E0     		b	.L21
 587              	.LVL39:
 588              	.L22:
 797:Core/Src/main.c ****         crc ^= data[i];
 589              		.loc 1 797 9 is_stmt 1 discriminator 3 view .LVU119
 590              		.loc 1 797 20 is_stmt 0 discriminator 3 view .LVU120
 591 000a E25C     		ldrb	r2, [r4, r3]
 592              		.loc 1 797 13 discriminator 3 view .LVU121
 593 000c 5040     		eors	r0, r2
 594              	.LVL40:
 796:Core/Src/main.c ****         crc ^= data[i];
 595              		.loc 1 796 30 is_stmt 1 discriminator 3 view .LVU122
 596 000e 0133     		adds	r3, r3, #1
 597              	.LVL41:
 598              	.L21:
 796:Core/Src/main.c ****         crc ^= data[i];
 599              		.loc 1 796 19 discriminator 1 view .LVU123
 600 0010 8B42     		cmp	r3, r1
 601 0012 FAD3     		bcc	.L22
 798:Core/Src/main.c ****     }
 799:Core/Src/main.c **** 
 800:Core/Src/main.c ****     return crc;
 602              		.loc 1 800 5 view .LVU124
 801:Core/Src/main.c **** }
 603              		.loc 1 801 1 is_stmt 0 view .LVU125
 604              		@ sp needed
 605              	.LVL42:
 606              		.loc 1 801 1 view .LVU126
 607 0014 10BD     		pop	{r4, pc}
 608              		.cfi_endproc
 609              	.LFE55:
 611              		.global	__aeabi_idiv
 612              		.section	.text.pid_controller,"ax",%progbits
 613              		.align	1
 614              		.global	pid_controller
 615              		.syntax unified
 616              		.code	16
 617              		.thumb_func
 619              	pid_controller:
 620              	.LVL43:
 621              	.LFB56:
 802:Core/Src/main.c **** 
 803:Core/Src/main.c **** // PID Controller Variables
 804:Core/Src/main.c **** // int32_t integral = PID_UPPER_THRESHOLD*1000;     // Integral term accumulator
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 26


 805:Core/Src/main.c **** // // uint32_t integral_2 = 0;     // Integral term accumulator
 806:Core/Src/main.c **** // int32_t prev_error = 0;   // Previous error for derivative term
 807:Core/Src/main.c **** // uint16_t prev_error_2 = 0; 
 808:Core/Src/main.c **** 
 809:Core/Src/main.c **** uint16_t kp = 5;  // Proportional gain (Scaled by 100)
 810:Core/Src/main.c **** uint16_t ki = 100;  // Integral gain (Scaled by 100)
 811:Core/Src/main.c **** uint16_t kd = 10;  // Derivative gain (Scaled by 100)
 812:Core/Src/main.c **** 
 813:Core/Src/main.c **** 
 814:Core/Src/main.c **** // *** PID controller *** //
 815:Core/Src/main.c **** // uint16_t pid_controller(uint16_t measured_value){
 816:Core/Src/main.c **** //   if(measured_value < PID_SETPOINT){
 817:Core/Src/main.c **** //     uint16_t error = (PID_SETPOINT - measured_value)/1000;
 818:Core/Src/main.c **** //     if(error == 0)  { }//control_signal++;                             }
 819:Core/Src/main.c **** //     else            { control_signal = control_signal + error; }
 820:Core/Src/main.c **** //     if(control_signal > PID_UPPER_THRESHOLD){
 821:Core/Src/main.c **** //       control_signal = PID_UPPER_THRESHOLD;
 822:Core/Src/main.c **** //     }
 823:Core/Src/main.c **** //   }
 824:Core/Src/main.c **** //   if(measured_value > PID_SETPOINT){
 825:Core/Src/main.c **** //     uint8_t error = (measured_value - PID_SETPOINT)/1000;
 826:Core/Src/main.c **** //     if(control_signal > error + PID_UNDER_THRESHOLD){
 827:Core/Src/main.c **** //       if(error == 0)  { }//control_signal--;                         }
 828:Core/Src/main.c **** //       else            { control_signal = control_signal - error;  }
 829:Core/Src/main.c **** //     }
 830:Core/Src/main.c **** //     else{
 831:Core/Src/main.c **** //       control_signal = PID_UNDER_THRESHOLD;
 832:Core/Src/main.c **** //     }
 833:Core/Src/main.c **** //   }
 834:Core/Src/main.c **** uint16_t pid_controller(uint16_t measured_value){
 622              		.loc 1 834 49 is_stmt 1 view -0
 623              		.cfi_startproc
 624              		@ args = 0, pretend = 0, frame = 0
 625              		@ frame_needed = 0, uses_anonymous_args = 0
 626              		.loc 1 834 49 is_stmt 0 view .LVU128
 627 0000 10B5     		push	{r4, lr}
 628              		.cfi_def_cfa_offset 8
 629              		.cfi_offset 4, -8
 630              		.cfi_offset 14, -4
 835:Core/Src/main.c ****   // if(measured_value < PID_SETPOINT){
 836:Core/Src/main.c ****   //   uint16_t error = (PID_SETPOINT - measured_value);
 837:Core/Src/main.c ****   //   prev_error_1 = error;
 838:Core/Src/main.c ****   //   if(error == 0)  { }//control_signal++;                             }
 839:Core/Src/main.c ****   //   else            { 
 840:Core/Src/main.c ****   //     // Proportional term
 841:Core/Src/main.c ****   //     int p_term = (kp * error) / 1000;
 842:Core/Src/main.c **** 
 843:Core/Src/main.c ****   //     // Integral term
 844:Core/Src/main.c ****   //     integral_1 += (ki * error) / 1000;
 845:Core/Src/main.c **** 
 846:Core/Src/main.c ****   //     // Derivative term
 847:Core/Src/main.c ****   //     int d_term = (kd * (error - prev_error_1)) / 1000;
 848:Core/Src/main.c ****   //     control_signal = p_term + integral_1 + d_term;
 849:Core/Src/main.c ****   //   }
 850:Core/Src/main.c ****   //   if(control_signal > PID_UPPER_THRESHOLD){
 851:Core/Src/main.c ****   //     control_signal = PID_UPPER_THRESHOLD;
 852:Core/Src/main.c ****   //   }
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 27


 853:Core/Src/main.c ****   // }
 854:Core/Src/main.c ****   // if(measured_value > PID_SETPOINT){
 855:Core/Src/main.c ****   //   uint16_t error = (measured_value - PID_SETPOINT);
 856:Core/Src/main.c ****   //   prev_error_2 = error;
 857:Core/Src/main.c ****   //   if(control_signal > error + PID_UNDER_THRESHOLD){
 858:Core/Src/main.c ****   //     if(error == 0)  { }//control_signal--;                         }
 859:Core/Src/main.c ****   //     else            { 
 860:Core/Src/main.c ****   //       // Proportional term
 861:Core/Src/main.c ****   //       int p_term = (kp * error) / 1000;
 862:Core/Src/main.c **** 
 863:Core/Src/main.c ****   //       // Integral term
 864:Core/Src/main.c ****   //       integral_2 += (ki * error) / 1000;
 865:Core/Src/main.c **** 
 866:Core/Src/main.c ****   //       // Derivative term
 867:Core/Src/main.c ****   //       int d_term = (kd * (error - prev_error_1)) / 1000;
 868:Core/Src/main.c ****   //       control_signal = p_term + integral_2 + d_term;  
 869:Core/Src/main.c ****   //     }
 870:Core/Src/main.c ****   //   }
 871:Core/Src/main.c ****   //   else{
 872:Core/Src/main.c ****   //     control_signal = PID_UNDER_THRESHOLD;
 873:Core/Src/main.c ****   //   }
 874:Core/Src/main.c ****   // }
 875:Core/Src/main.c ****   // return control_signal;
 876:Core/Src/main.c **** 
 877:Core/Src/main.c **** // V2
 878:Core/Src/main.c ****   // if(measured_value < PID_SETPOINT){
 879:Core/Src/main.c ****   //   pid_setpoint = measured_value + 500;
 880:Core/Src/main.c ****   // }
 881:Core/Src/main.c ****   // else{
 882:Core/Src/main.c ****   //   pid_setpoint = PID_SETPOINT;
 883:Core/Src/main.c ****   // }
 884:Core/Src/main.c **** 
 885:Core/Src/main.c ****   // int32_t error = pid_setpoint - measured_value;
 886:Core/Src/main.c **** 
 887:Core/Src/main.c ****   // // Proportional term
 888:Core/Src/main.c ****   // int32_t p_term = (kp * error) / 100;
 889:Core/Src/main.c **** 
 890:Core/Src/main.c ****   // // Integral term
 891:Core/Src/main.c ****   // integral += (ki * error) / 100;
 892:Core/Src/main.c **** 
 893:Core/Src/main.c ****   // // Derivative term
 894:Core/Src/main.c ****   // int32_t d_term = (kd * (error - prev_error)) / 100;
 895:Core/Src/main.c ****   // prev_error = error;
 896:Core/Src/main.c **** 
 897:Core/Src/main.c ****   // // Calculate the control signal
 898:Core/Src/main.c ****   // control_signal = (p_term + integral + d_term)/1000;
 899:Core/Src/main.c **** 
 900:Core/Src/main.c ****   // // Limit the control output to a maximum of 256
 901:Core/Src/main.c ****   // // control_signal = limit_max(control_signal, 50);
 902:Core/Src/main.c **** 
 903:Core/Src/main.c ****   // // if(control_signal < PID_UNDER_THRESHOLD){
 904:Core/Src/main.c ****   // //   control_signal = PID_UNDER_THRESHOLD;
 905:Core/Src/main.c ****   // //   integral = PID_UNDER_THRESHOLD*1000;
 906:Core/Src/main.c ****   // // }
 907:Core/Src/main.c ****   // if(control_signal > PID_UPPER_THRESHOLD){
 908:Core/Src/main.c ****   //   control_signal = PID_UPPER_THRESHOLD;
 909:Core/Src/main.c ****   //   integral = PID_UPPER_THRESHOLD*1000;
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 28


 910:Core/Src/main.c ****   // }
 911:Core/Src/main.c ****   // prev_control_signal = control_signal;
 912:Core/Src/main.c **** 
 913:Core/Src/main.c ****   // if(control_signal < prev_control_signal){
 914:Core/Src/main.c ****   //   control_signal--;
 915:Core/Src/main.c ****   // }
 916:Core/Src/main.c ****   // else{
 917:Core/Src/main.c ****   //   control_signal++;
 918:Core/Src/main.c ****   // }
 919:Core/Src/main.c **** 
 920:Core/Src/main.c ****   // V3
 921:Core/Src/main.c **** 
 922:Core/Src/main.c ****   if(measured_value > PID_SETPOINT){
 631              		.loc 1 922 3 is_stmt 1 view .LVU129
 632              		.loc 1 922 5 is_stmt 0 view .LVU130
 633 0002 134B     		ldr	r3, .L29
 634 0004 9842     		cmp	r0, r3
 635 0006 11D9     		bls	.L24
 923:Core/Src/main.c ****     control_signal--;
 636              		.loc 1 923 5 is_stmt 1 view .LVU131
 637              		.loc 1 923 19 is_stmt 0 view .LVU132
 638 0008 124A     		ldr	r2, .L29+4
 639 000a 1368     		ldr	r3, [r2]
 640 000c 013B     		subs	r3, r3, #1
 641 000e 1360     		str	r3, [r2]
 642              	.LVL44:
 643              	.L25:
 924:Core/Src/main.c ****   }
 925:Core/Src/main.c ****   else{
 926:Core/Src/main.c ****     uint16_t res = (PID_SETPOINT - measured_value)/1000;
 927:Core/Src/main.c ****     control_signal = control_signal + res;
 928:Core/Src/main.c ****   }
 929:Core/Src/main.c **** 
 930:Core/Src/main.c ****   if(control_signal > PID_UPPER_THRESHOLD){control_signal = PID_UPPER_THRESHOLD;}
 644              		.loc 1 930 3 is_stmt 1 view .LVU133
 645              		.loc 1 930 21 is_stmt 0 view .LVU134
 646 0010 104B     		ldr	r3, .L29+4
 647 0012 1B68     		ldr	r3, [r3]
 648              		.loc 1 930 5 view .LVU135
 649 0014 1E2B     		cmp	r3, #30
 650 0016 02DD     		ble	.L26
 651              		.loc 1 930 44 is_stmt 1 discriminator 1 view .LVU136
 652              		.loc 1 930 59 is_stmt 0 discriminator 1 view .LVU137
 653 0018 0E4B     		ldr	r3, .L29+4
 654 001a 1E22     		movs	r2, #30
 655 001c 1A60     		str	r2, [r3]
 656              	.L26:
 931:Core/Src/main.c ****   if(control_signal < PID_UNDER_THRESHOLD){control_signal = PID_UNDER_THRESHOLD;}
 657              		.loc 1 931 3 is_stmt 1 view .LVU138
 658              		.loc 1 931 21 is_stmt 0 view .LVU139
 659 001e 0D4B     		ldr	r3, .L29+4
 660 0020 1B68     		ldr	r3, [r3]
 661              		.loc 1 931 5 view .LVU140
 662 0022 002B     		cmp	r3, #0
 663 0024 0FDB     		blt	.L28
 664              	.L27:
 932:Core/Src/main.c **** 
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 29


 933:Core/Src/main.c ****   return control_signal;
 665              		.loc 1 933 3 is_stmt 1 view .LVU141
 666              		.loc 1 933 10 is_stmt 0 view .LVU142
 667 0026 0B4B     		ldr	r3, .L29+4
 668 0028 1888     		ldrh	r0, [r3]
 934:Core/Src/main.c **** 
 935:Core/Src/main.c **** }
 669              		.loc 1 935 1 view .LVU143
 670              		@ sp needed
 671 002a 10BD     		pop	{r4, pc}
 672              	.LVL45:
 673              	.L24:
 674              	.LBB7:
 926:Core/Src/main.c ****     control_signal = control_signal + res;
 675              		.loc 1 926 5 is_stmt 1 view .LVU144
 926:Core/Src/main.c ****     control_signal = control_signal + res;
 676              		.loc 1 926 34 is_stmt 0 view .LVU145
 677 002c 084B     		ldr	r3, .L29
 678 002e 181A     		subs	r0, r3, r0
 679              	.LVL46:
 926:Core/Src/main.c ****     control_signal = control_signal + res;
 680              		.loc 1 926 51 view .LVU146
 681 0030 FA21     		movs	r1, #250
 682 0032 8900     		lsls	r1, r1, #2
 683 0034 FFF7FEFF 		bl	__aeabi_idiv
 684              	.LVL47:
 927:Core/Src/main.c ****   }
 685              		.loc 1 927 5 is_stmt 1 view .LVU147
 927:Core/Src/main.c ****   }
 686              		.loc 1 927 37 is_stmt 0 view .LVU148
 687 0038 064B     		ldr	r3, .L29+4
 688 003a 0004     		lsls	r0, r0, #16
 689              	.LVL48:
 927:Core/Src/main.c ****   }
 690              		.loc 1 927 37 view .LVU149
 691 003c 000C     		lsrs	r0, r0, #16
 692 003e 1A68     		ldr	r2, [r3]
 693 0040 8018     		adds	r0, r0, r2
 927:Core/Src/main.c ****   }
 694              		.loc 1 927 20 view .LVU150
 695 0042 1860     		str	r0, [r3]
 696 0044 E4E7     		b	.L25
 697              	.LVL49:
 698              	.L28:
 927:Core/Src/main.c ****   }
 699              		.loc 1 927 20 view .LVU151
 700              	.LBE7:
 931:Core/Src/main.c **** 
 701              		.loc 1 931 44 is_stmt 1 discriminator 1 view .LVU152
 931:Core/Src/main.c **** 
 702              		.loc 1 931 59 is_stmt 0 discriminator 1 view .LVU153
 703 0046 034B     		ldr	r3, .L29+4
 704 0048 0022     		movs	r2, #0
 705 004a 1A60     		str	r2, [r3]
 706 004c EBE7     		b	.L27
 707              	.L30:
 708 004e C046     		.align	2
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 30


 709              	.L29:
 710 0050 10270000 		.word	10000
 711 0054 00000000 		.word	control_signal
 712              		.cfi_endproc
 713              	.LFE56:
 715              		.section	.text.change_potentiometer,"ax",%progbits
 716              		.align	1
 717              		.global	change_potentiometer
 718              		.syntax unified
 719              		.code	16
 720              		.thumb_func
 722              	change_potentiometer:
 723              	.LVL50:
 724              	.LFB57:
 936:Core/Src/main.c **** 
 937:Core/Src/main.c **** // *** Change resistance digital potentiometer *** //
 938:Core/Src/main.c **** void change_potentiometer(uint8_t new_value){
 725              		.loc 1 938 45 is_stmt 1 view -0
 726              		.cfi_startproc
 727              		@ args = 0, pretend = 0, frame = 0
 728              		@ frame_needed = 0, uses_anonymous_args = 0
 729              		.loc 1 938 45 is_stmt 0 view .LVU155
 730 0000 70B5     		push	{r4, r5, r6, lr}
 731              		.cfi_def_cfa_offset 16
 732              		.cfi_offset 4, -16
 733              		.cfi_offset 5, -12
 734              		.cfi_offset 6, -8
 735              		.cfi_offset 14, -4
 939:Core/Src/main.c ****   spi_buffer[1] = new_value;
 736              		.loc 1 939 3 is_stmt 1 view .LVU156
 737              		.loc 1 939 17 is_stmt 0 view .LVU157
 738 0002 0B4E     		ldr	r6, .L32
 739 0004 7070     		strb	r0, [r6, #1]
 940:Core/Src/main.c ****   HAL_GPIO_WritePin(SC_GPIO_Port, SC_Pin, GPIO_PIN_RESET);
 740              		.loc 1 940 3 is_stmt 1 view .LVU158
 741 0006 8025     		movs	r5, #128
 742 0008 ED01     		lsls	r5, r5, #7
 743 000a A024     		movs	r4, #160
 744 000c E405     		lsls	r4, r4, #23
 745 000e 0022     		movs	r2, #0
 746 0010 2900     		movs	r1, r5
 747 0012 2000     		movs	r0, r4
 748              	.LVL51:
 749              		.loc 1 940 3 is_stmt 0 view .LVU159
 750 0014 FFF7FEFF 		bl	HAL_GPIO_WritePin
 751              	.LVL52:
 941:Core/Src/main.c ****   HAL_SPI_Transmit(&hspi1, spi_buffer, 2, 200);
 752              		.loc 1 941 3 is_stmt 1 view .LVU160
 753 0018 0648     		ldr	r0, .L32+4
 754 001a C823     		movs	r3, #200
 755 001c 0222     		movs	r2, #2
 756 001e 3100     		movs	r1, r6
 757 0020 FFF7FEFF 		bl	HAL_SPI_Transmit
 758              	.LVL53:
 942:Core/Src/main.c ****   HAL_GPIO_WritePin(SC_GPIO_Port, SC_Pin, GPIO_PIN_SET);
 759              		.loc 1 942 3 view .LVU161
 760 0024 0122     		movs	r2, #1
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 31


 761 0026 2900     		movs	r1, r5
 762 0028 2000     		movs	r0, r4
 763 002a FFF7FEFF 		bl	HAL_GPIO_WritePin
 764              	.LVL54:
 943:Core/Src/main.c **** }
 765              		.loc 1 943 1 is_stmt 0 view .LVU162
 766              		@ sp needed
 767 002e 70BD     		pop	{r4, r5, r6, pc}
 768              	.L33:
 769              		.align	2
 770              	.L32:
 771 0030 00000000 		.word	spi_buffer
 772 0034 00000000 		.word	hspi1
 773              		.cfi_endproc
 774              	.LFE57:
 776              		.section	.text.Error_Handler,"ax",%progbits
 777              		.align	1
 778              		.global	Error_Handler
 779              		.syntax unified
 780              		.code	16
 781              		.thumb_func
 783              	Error_Handler:
 784              	.LFB58:
 944:Core/Src/main.c **** 
 945:Core/Src/main.c **** /* USER CODE E
 946:Core/Src/main.c **** ND 4 */
 947:Core/Src/main.c **** 
 948:Core/Src/main.c **** /**
 949:Core/Src/main.c ****   * @brief  This function is executed in case of error occurrence.
 950:Core/Src/main.c ****   * @retval None
 951:Core/Src/main.c ****   */
 952:Core/Src/main.c **** void Error_Handler(void)
 953:Core/Src/main.c **** {
 785              		.loc 1 953 1 is_stmt 1 view -0
 786              		.cfi_startproc
 787              		@ Volatile: function does not return.
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              		@ link register save eliminated.
 954:Core/Src/main.c ****   /* USER CODE BEGIN Error_Handler_Debug */
 955:Core/Src/main.c ****   /* User can add his own implementation to report the HAL error return state */
 956:Core/Src/main.c ****   __disable_irq();
 791              		.loc 1 956 3 view .LVU164
 792              	.LBB8:
 793              	.LBI8:
 794              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.0.4
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     09. April 2018
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2018 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 32


  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 33


  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 117:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 120:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 121:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 122:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 34


 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 129:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 130:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 131:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 133:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 134:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 135:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 140:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 795              		.loc 2 140 27 view .LVU165
 796              	.LBB9:
 141:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 797              		.loc 2 142 3 view .LVU166
 798              		.syntax divided
 799              	@ 142 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 800 0000 72B6     		cpsid i
 801              	@ 0 "" 2
 802              		.thumb
 803              		.syntax unified
 804              	.L35:
 805              	.LBE9:
 806              	.LBE8:
 957:Core/Src/main.c ****   while (1)
 807              		.loc 1 957 3 discriminator 1 view .LVU167
 958:Core/Src/main.c ****   {
 959:Core/Src/main.c ****   }
 808              		.loc 1 959 3 discriminator 1 view .LVU168
 957:Core/Src/main.c ****   while (1)
 809              		.loc 1 957 9 discriminator 1 view .LVU169
 810 0002 FEE7     		b	.L35
 811              		.cfi_endproc
 812              	.LFE58:
 814              		.section	.text.MX_ADC_Init,"ax",%progbits
 815              		.align	1
 816              		.syntax unified
 817              		.code	16
 818              		.thumb_func
 820              	MX_ADC_Init:
 821              	.LFB42:
 464:Core/Src/main.c **** 
 822              		.loc 1 464 1 view -0
 823              		.cfi_startproc
 824              		@ args = 0, pretend = 0, frame = 8
 825              		@ frame_needed = 0, uses_anonymous_args = 0
 826 0000 00B5     		push	{lr}
 827              		.cfi_def_cfa_offset 4
 828              		.cfi_offset 14, -4
 829 0002 83B0     		sub	sp, sp, #12
 830              		.cfi_def_cfa_offset 16
 470:Core/Src/main.c **** 
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 35


 831              		.loc 1 470 3 view .LVU171
 470:Core/Src/main.c **** 
 832              		.loc 1 470 26 is_stmt 0 view .LVU172
 833 0004 0822     		movs	r2, #8
 834 0006 0021     		movs	r1, #0
 835 0008 6846     		mov	r0, sp
 836 000a FFF7FEFF 		bl	memset
 837              	.LVL55:
 478:Core/Src/main.c ****   hadc.Init.OversamplingMode = DISABLE;
 838              		.loc 1 478 3 is_stmt 1 view .LVU173
 478:Core/Src/main.c ****   hadc.Init.OversamplingMode = DISABLE;
 839              		.loc 1 478 17 is_stmt 0 view .LVU174
 840 000e 2948     		ldr	r0, .L47
 841 0010 294B     		ldr	r3, .L47+4
 842 0012 0360     		str	r3, [r0]
 479:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 843              		.loc 1 479 3 is_stmt 1 view .LVU175
 479:Core/Src/main.c ****   hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 844              		.loc 1 479 30 is_stmt 0 view .LVU176
 845 0014 0023     		movs	r3, #0
 846 0016 C363     		str	r3, [r0, #60]
 480:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 847              		.loc 1 480 3 is_stmt 1 view .LVU177
 480:Core/Src/main.c ****   hadc.Init.Resolution = ADC_RESOLUTION_12B;
 848              		.loc 1 480 28 is_stmt 0 view .LVU178
 849 0018 C022     		movs	r2, #192
 850 001a 1206     		lsls	r2, r2, #24
 851 001c 4260     		str	r2, [r0, #4]
 481:Core/Src/main.c ****   hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 852              		.loc 1 481 3 is_stmt 1 view .LVU179
 481:Core/Src/main.c ****   hadc.Init.SamplingTime = ADC_SAMPLETIME_160CYCLES_5;
 853              		.loc 1 481 24 is_stmt 0 view .LVU180
 854 001e 8360     		str	r3, [r0, #8]
 482:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 855              		.loc 1 482 3 is_stmt 1 view .LVU181
 482:Core/Src/main.c ****   hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 856              		.loc 1 482 26 is_stmt 0 view .LVU182
 857 0020 0722     		movs	r2, #7
 858 0022 8263     		str	r2, [r0, #56]
 483:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 859              		.loc 1 483 3 is_stmt 1 view .LVU183
 483:Core/Src/main.c ****   hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 860              		.loc 1 483 26 is_stmt 0 view .LVU184
 861 0024 063A     		subs	r2, r2, #6
 862 0026 0261     		str	r2, [r0, #16]
 484:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 863              		.loc 1 484 3 is_stmt 1 view .LVU185
 484:Core/Src/main.c ****   hadc.Init.ContinuousConvMode = ENABLE;
 864              		.loc 1 484 23 is_stmt 0 view .LVU186
 865 0028 C360     		str	r3, [r0, #12]
 485:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 866              		.loc 1 485 3 is_stmt 1 view .LVU187
 485:Core/Src/main.c ****   hadc.Init.DiscontinuousConvMode = DISABLE;
 867              		.loc 1 485 32 is_stmt 0 view .LVU188
 868 002a 2021     		movs	r1, #32
 869 002c 4254     		strb	r2, [r0, r1]
 486:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 36


 870              		.loc 1 486 3 is_stmt 1 view .LVU189
 486:Core/Src/main.c ****   hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 871              		.loc 1 486 35 is_stmt 0 view .LVU190
 872 002e 0131     		adds	r1, r1, #1
 873 0030 4354     		strb	r3, [r0, r1]
 487:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 874              		.loc 1 487 3 is_stmt 1 view .LVU191
 487:Core/Src/main.c ****   hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 875              		.loc 1 487 34 is_stmt 0 view .LVU192
 876 0032 8362     		str	r3, [r0, #40]
 488:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
 877              		.loc 1 488 3 is_stmt 1 view .LVU193
 488:Core/Src/main.c ****   hadc.Init.DMAContinuousRequests = DISABLE;
 878              		.loc 1 488 30 is_stmt 0 view .LVU194
 879 0034 C221     		movs	r1, #194
 880 0036 FF31     		adds	r1, r1, #255
 881 0038 4162     		str	r1, [r0, #36]
 489:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 882              		.loc 1 489 3 is_stmt 1 view .LVU195
 489:Core/Src/main.c ****   hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 883              		.loc 1 489 35 is_stmt 0 view .LVU196
 884 003a 9639     		subs	r1, r1, #150
 885 003c FF39     		subs	r1, r1, #255
 886 003e 4354     		strb	r3, [r0, r1]
 490:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 887              		.loc 1 490 3 is_stmt 1 view .LVU197
 490:Core/Src/main.c ****   hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 888              		.loc 1 490 26 is_stmt 0 view .LVU198
 889 0040 2839     		subs	r1, r1, #40
 890 0042 4161     		str	r1, [r0, #20]
 491:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 891              		.loc 1 491 3 is_stmt 1 view .LVU199
 491:Core/Src/main.c ****   hadc.Init.LowPowerAutoWait = DISABLE;
 892              		.loc 1 491 21 is_stmt 0 view .LVU200
 893 0044 0363     		str	r3, [r0, #48]
 492:Core/Src/main.c ****   hadc.Init.LowPowerFrequencyMode = ENABLE;
 894              		.loc 1 492 3 is_stmt 1 view .LVU201
 492:Core/Src/main.c ****   hadc.Init.LowPowerFrequencyMode = ENABLE;
 895              		.loc 1 492 30 is_stmt 0 view .LVU202
 896 0046 8361     		str	r3, [r0, #24]
 493:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 897              		.loc 1 493 3 is_stmt 1 view .LVU203
 493:Core/Src/main.c ****   hadc.Init.LowPowerAutoPowerOff = DISABLE;
 898              		.loc 1 493 35 is_stmt 0 view .LVU204
 899 0048 4263     		str	r2, [r0, #52]
 494:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 900              		.loc 1 494 3 is_stmt 1 view .LVU205
 494:Core/Src/main.c ****   if (HAL_ADC_Init(&hadc) != HAL_OK)
 901              		.loc 1 494 34 is_stmt 0 view .LVU206
 902 004a C361     		str	r3, [r0, #28]
 495:Core/Src/main.c ****   {
 903              		.loc 1 495 3 is_stmt 1 view .LVU207
 495:Core/Src/main.c ****   {
 904              		.loc 1 495 7 is_stmt 0 view .LVU208
 905 004c FFF7FEFF 		bl	HAL_ADC_Init
 906              	.LVL56:
 495:Core/Src/main.c ****   {
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 37


 907              		.loc 1 495 6 view .LVU209
 908 0050 0028     		cmp	r0, #0
 909 0052 24D1     		bne	.L42
 502:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 910              		.loc 1 502 3 is_stmt 1 view .LVU210
 502:Core/Src/main.c ****   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 911              		.loc 1 502 19 is_stmt 0 view .LVU211
 912 0054 194B     		ldr	r3, .L47+8
 913 0056 0093     		str	r3, [sp]
 503:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 914              		.loc 1 503 3 is_stmt 1 view .LVU212
 503:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 915              		.loc 1 503 16 is_stmt 0 view .LVU213
 916 0058 8023     		movs	r3, #128
 917 005a 5B01     		lsls	r3, r3, #5
 918 005c 0193     		str	r3, [sp, #4]
 504:Core/Src/main.c ****   {
 919              		.loc 1 504 3 is_stmt 1 view .LVU214
 504:Core/Src/main.c ****   {
 920              		.loc 1 504 7 is_stmt 0 view .LVU215
 921 005e 1548     		ldr	r0, .L47
 922 0060 6946     		mov	r1, sp
 923 0062 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 924              	.LVL57:
 504:Core/Src/main.c ****   {
 925              		.loc 1 504 6 view .LVU216
 926 0066 0028     		cmp	r0, #0
 927 0068 1BD1     		bne	.L43
 511:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 928              		.loc 1 511 3 is_stmt 1 view .LVU217
 511:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 929              		.loc 1 511 19 is_stmt 0 view .LVU218
 930 006a 154B     		ldr	r3, .L47+12
 931 006c 0093     		str	r3, [sp]
 512:Core/Src/main.c ****   {
 932              		.loc 1 512 3 is_stmt 1 view .LVU219
 512:Core/Src/main.c ****   {
 933              		.loc 1 512 7 is_stmt 0 view .LVU220
 934 006e 1148     		ldr	r0, .L47
 935 0070 6946     		mov	r1, sp
 936 0072 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 937              	.LVL58:
 512:Core/Src/main.c ****   {
 938              		.loc 1 512 6 view .LVU221
 939 0076 0028     		cmp	r0, #0
 940 0078 15D1     		bne	.L44
 519:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 941              		.loc 1 519 3 is_stmt 1 view .LVU222
 519:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 942              		.loc 1 519 19 is_stmt 0 view .LVU223
 943 007a 124B     		ldr	r3, .L47+16
 944 007c 0093     		str	r3, [sp]
 520:Core/Src/main.c ****   {
 945              		.loc 1 520 3 is_stmt 1 view .LVU224
 520:Core/Src/main.c ****   {
 946              		.loc 1 520 7 is_stmt 0 view .LVU225
 947 007e 0D48     		ldr	r0, .L47
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 38


 948 0080 6946     		mov	r1, sp
 949 0082 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 950              	.LVL59:
 520:Core/Src/main.c ****   {
 951              		.loc 1 520 6 view .LVU226
 952 0086 0028     		cmp	r0, #0
 953 0088 0FD1     		bne	.L45
 527:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 954              		.loc 1 527 3 is_stmt 1 view .LVU227
 527:Core/Src/main.c ****   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 955              		.loc 1 527 19 is_stmt 0 view .LVU228
 956 008a 0F4B     		ldr	r3, .L47+20
 957 008c 0093     		str	r3, [sp]
 528:Core/Src/main.c ****   {
 958              		.loc 1 528 3 is_stmt 1 view .LVU229
 528:Core/Src/main.c ****   {
 959              		.loc 1 528 7 is_stmt 0 view .LVU230
 960 008e 0948     		ldr	r0, .L47
 961 0090 6946     		mov	r1, sp
 962 0092 FFF7FEFF 		bl	HAL_ADC_ConfigChannel
 963              	.LVL60:
 528:Core/Src/main.c ****   {
 964              		.loc 1 528 6 view .LVU231
 965 0096 0028     		cmp	r0, #0
 966 0098 09D1     		bne	.L46
 536:Core/Src/main.c **** 
 967              		.loc 1 536 1 view .LVU232
 968 009a 03B0     		add	sp, sp, #12
 969              		@ sp needed
 970 009c 00BD     		pop	{pc}
 971              	.L42:
 497:Core/Src/main.c ****   }
 972              		.loc 1 497 5 is_stmt 1 view .LVU233
 973 009e FFF7FEFF 		bl	Error_Handler
 974              	.LVL61:
 975              	.L43:
 506:Core/Src/main.c ****   }
 976              		.loc 1 506 5 view .LVU234
 977 00a2 FFF7FEFF 		bl	Error_Handler
 978              	.LVL62:
 979              	.L44:
 514:Core/Src/main.c ****   }
 980              		.loc 1 514 5 view .LVU235
 981 00a6 FFF7FEFF 		bl	Error_Handler
 982              	.LVL63:
 983              	.L45:
 522:Core/Src/main.c ****   }
 984              		.loc 1 522 5 view .LVU236
 985 00aa FFF7FEFF 		bl	Error_Handler
 986              	.LVL64:
 987              	.L46:
 530:Core/Src/main.c ****   }
 988              		.loc 1 530 5 view .LVU237
 989 00ae FFF7FEFF 		bl	Error_Handler
 990              	.LVL65:
 991              	.L48:
 992 00b2 C046     		.align	2
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 39


 993              	.L47:
 994 00b4 00000000 		.word	hadc
 995 00b8 00240140 		.word	1073816576
 996 00bc 20000014 		.word	335544352
 997 00c0 40000018 		.word	402653248
 998 00c4 8000001C 		.word	469762176
 999 00c8 00000244 		.word	1140981760
 1000              		.cfi_endproc
 1001              	.LFE42:
 1003              		.section	.text.MX_USART2_UART_Init,"ax",%progbits
 1004              		.align	1
 1005              		.syntax unified
 1006              		.code	16
 1007              		.thumb_func
 1009              	MX_USART2_UART_Init:
 1010              	.LFB45:
 627:Core/Src/main.c **** 
 1011              		.loc 1 627 1 view -0
 1012              		.cfi_startproc
 1013              		@ args = 0, pretend = 0, frame = 0
 1014              		@ frame_needed = 0, uses_anonymous_args = 0
 1015 0000 10B5     		push	{r4, lr}
 1016              		.cfi_def_cfa_offset 8
 1017              		.cfi_offset 4, -8
 1018              		.cfi_offset 14, -4
 636:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1019              		.loc 1 636 3 view .LVU239
 636:Core/Src/main.c ****   huart2.Init.BaudRate = 115200;
 1020              		.loc 1 636 19 is_stmt 0 view .LVU240
 1021 0002 0B48     		ldr	r0, .L52
 1022 0004 0B4B     		ldr	r3, .L52+4
 1023 0006 0360     		str	r3, [r0]
 637:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1024              		.loc 1 637 3 is_stmt 1 view .LVU241
 637:Core/Src/main.c ****   huart2.Init.WordLength = UART_WORDLENGTH_8B;
 1025              		.loc 1 637 24 is_stmt 0 view .LVU242
 1026 0008 E123     		movs	r3, #225
 1027 000a 5B02     		lsls	r3, r3, #9
 1028 000c 4360     		str	r3, [r0, #4]
 638:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1029              		.loc 1 638 3 is_stmt 1 view .LVU243
 638:Core/Src/main.c ****   huart2.Init.StopBits = UART_STOPBITS_1;
 1030              		.loc 1 638 26 is_stmt 0 view .LVU244
 1031 000e 0023     		movs	r3, #0
 1032 0010 8360     		str	r3, [r0, #8]
 639:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1033              		.loc 1 639 3 is_stmt 1 view .LVU245
 639:Core/Src/main.c ****   huart2.Init.Parity = UART_PARITY_NONE;
 1034              		.loc 1 639 24 is_stmt 0 view .LVU246
 1035 0012 C360     		str	r3, [r0, #12]
 640:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1036              		.loc 1 640 3 is_stmt 1 view .LVU247
 640:Core/Src/main.c ****   huart2.Init.Mode = UART_MODE_TX_RX;
 1037              		.loc 1 640 22 is_stmt 0 view .LVU248
 1038 0014 0361     		str	r3, [r0, #16]
 641:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1039              		.loc 1 641 3 is_stmt 1 view .LVU249
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 40


 641:Core/Src/main.c ****   huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 1040              		.loc 1 641 20 is_stmt 0 view .LVU250
 1041 0016 0C22     		movs	r2, #12
 1042 0018 4261     		str	r2, [r0, #20]
 642:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1043              		.loc 1 642 3 is_stmt 1 view .LVU251
 642:Core/Src/main.c ****   huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 1044              		.loc 1 642 25 is_stmt 0 view .LVU252
 1045 001a 8361     		str	r3, [r0, #24]
 643:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1046              		.loc 1 643 3 is_stmt 1 view .LVU253
 643:Core/Src/main.c ****   huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 1047              		.loc 1 643 28 is_stmt 0 view .LVU254
 1048 001c C361     		str	r3, [r0, #28]
 644:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1049              		.loc 1 644 3 is_stmt 1 view .LVU255
 644:Core/Src/main.c ****   huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 1050              		.loc 1 644 30 is_stmt 0 view .LVU256
 1051 001e 0362     		str	r3, [r0, #32]
 645:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1052              		.loc 1 645 3 is_stmt 1 view .LVU257
 645:Core/Src/main.c ****   if (HAL_UART_Init(&huart2) != HAL_OK)
 1053              		.loc 1 645 38 is_stmt 0 view .LVU258
 1054 0020 4362     		str	r3, [r0, #36]
 646:Core/Src/main.c ****   {
 1055              		.loc 1 646 3 is_stmt 1 view .LVU259
 646:Core/Src/main.c ****   {
 1056              		.loc 1 646 7 is_stmt 0 view .LVU260
 1057 0022 FFF7FEFF 		bl	HAL_UART_Init
 1058              	.LVL66:
 646:Core/Src/main.c ****   {
 1059              		.loc 1 646 6 view .LVU261
 1060 0026 0028     		cmp	r0, #0
 1061 0028 00D1     		bne	.L51
 654:Core/Src/main.c **** 
 1062              		.loc 1 654 1 view .LVU262
 1063              		@ sp needed
 1064 002a 10BD     		pop	{r4, pc}
 1065              	.L51:
 648:Core/Src/main.c ****   }
 1066              		.loc 1 648 5 is_stmt 1 view .LVU263
 1067 002c FFF7FEFF 		bl	Error_Handler
 1068              	.LVL67:
 1069              	.L53:
 1070              		.align	2
 1071              	.L52:
 1072 0030 00000000 		.word	huart2
 1073 0034 00440040 		.word	1073759232
 1074              		.cfi_endproc
 1075              	.LFE45:
 1077              		.section	.text.MX_SPI1_Init,"ax",%progbits
 1078              		.align	1
 1079              		.syntax unified
 1080              		.code	16
 1081              		.thumb_func
 1083              	MX_SPI1_Init:
 1084              	.LFB43:
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 41


 544:Core/Src/main.c **** 
 1085              		.loc 1 544 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089 0000 10B5     		push	{r4, lr}
 1090              		.cfi_def_cfa_offset 8
 1091              		.cfi_offset 4, -8
 1092              		.cfi_offset 14, -4
 554:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 1093              		.loc 1 554 3 view .LVU265
 554:Core/Src/main.c ****   hspi1.Init.Mode = SPI_MODE_MASTER;
 1094              		.loc 1 554 18 is_stmt 0 view .LVU266
 1095 0002 0D48     		ldr	r0, .L57
 1096 0004 0D4B     		ldr	r3, .L57+4
 1097 0006 0360     		str	r3, [r0]
 555:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1098              		.loc 1 555 3 is_stmt 1 view .LVU267
 555:Core/Src/main.c ****   hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 1099              		.loc 1 555 19 is_stmt 0 view .LVU268
 1100 0008 8223     		movs	r3, #130
 1101 000a 5B00     		lsls	r3, r3, #1
 1102 000c 4360     		str	r3, [r0, #4]
 556:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1103              		.loc 1 556 3 is_stmt 1 view .LVU269
 556:Core/Src/main.c ****   hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 1104              		.loc 1 556 24 is_stmt 0 view .LVU270
 1105 000e 0023     		movs	r3, #0
 1106 0010 8360     		str	r3, [r0, #8]
 557:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1107              		.loc 1 557 3 is_stmt 1 view .LVU271
 557:Core/Src/main.c ****   hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 1108              		.loc 1 557 23 is_stmt 0 view .LVU272
 1109 0012 C360     		str	r3, [r0, #12]
 558:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1110              		.loc 1 558 3 is_stmt 1 view .LVU273
 558:Core/Src/main.c ****   hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 1111              		.loc 1 558 26 is_stmt 0 view .LVU274
 1112 0014 0361     		str	r3, [r0, #16]
 559:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 1113              		.loc 1 559 3 is_stmt 1 view .LVU275
 559:Core/Src/main.c ****   hspi1.Init.NSS = SPI_NSS_SOFT;
 1114              		.loc 1 559 23 is_stmt 0 view .LVU276
 1115 0016 4361     		str	r3, [r0, #20]
 560:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1116              		.loc 1 560 3 is_stmt 1 view .LVU277
 560:Core/Src/main.c ****   hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 1117              		.loc 1 560 18 is_stmt 0 view .LVU278
 1118 0018 8022     		movs	r2, #128
 1119 001a 9200     		lsls	r2, r2, #2
 1120 001c 8261     		str	r2, [r0, #24]
 561:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1121              		.loc 1 561 3 is_stmt 1 view .LVU279
 561:Core/Src/main.c ****   hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 1122              		.loc 1 561 32 is_stmt 0 view .LVU280
 1123 001e C361     		str	r3, [r0, #28]
 562:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 42


 1124              		.loc 1 562 3 is_stmt 1 view .LVU281
 562:Core/Src/main.c ****   hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 1125              		.loc 1 562 23 is_stmt 0 view .LVU282
 1126 0020 0362     		str	r3, [r0, #32]
 563:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1127              		.loc 1 563 3 is_stmt 1 view .LVU283
 563:Core/Src/main.c ****   hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 1128              		.loc 1 563 21 is_stmt 0 view .LVU284
 1129 0022 4362     		str	r3, [r0, #36]
 564:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 1130              		.loc 1 564 3 is_stmt 1 view .LVU285
 564:Core/Src/main.c ****   hspi1.Init.CRCPolynomial = 7;
 1131              		.loc 1 564 29 is_stmt 0 view .LVU286
 1132 0024 8362     		str	r3, [r0, #40]
 565:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1133              		.loc 1 565 3 is_stmt 1 view .LVU287
 565:Core/Src/main.c ****   if (HAL_SPI_Init(&hspi1) != HAL_OK)
 1134              		.loc 1 565 28 is_stmt 0 view .LVU288
 1135 0026 0733     		adds	r3, r3, #7
 1136 0028 C362     		str	r3, [r0, #44]
 566:Core/Src/main.c ****   {
 1137              		.loc 1 566 3 is_stmt 1 view .LVU289
 566:Core/Src/main.c ****   {
 1138              		.loc 1 566 7 is_stmt 0 view .LVU290
 1139 002a FFF7FEFF 		bl	HAL_SPI_Init
 1140              	.LVL68:
 566:Core/Src/main.c ****   {
 1141              		.loc 1 566 6 view .LVU291
 1142 002e 0028     		cmp	r0, #0
 1143 0030 00D1     		bne	.L56
 574:Core/Src/main.c **** 
 1144              		.loc 1 574 1 view .LVU292
 1145              		@ sp needed
 1146 0032 10BD     		pop	{r4, pc}
 1147              	.L56:
 568:Core/Src/main.c ****   }
 1148              		.loc 1 568 5 is_stmt 1 view .LVU293
 1149 0034 FFF7FEFF 		bl	Error_Handler
 1150              	.LVL69:
 1151              	.L58:
 1152              		.align	2
 1153              	.L57:
 1154 0038 00000000 		.word	hspi1
 1155 003c 00300140 		.word	1073819648
 1156              		.cfi_endproc
 1157              	.LFE43:
 1159              		.section	.text.MX_TIM2_Init,"ax",%progbits
 1160              		.align	1
 1161              		.syntax unified
 1162              		.code	16
 1163              		.thumb_func
 1165              	MX_TIM2_Init:
 1166              	.LFB44:
 582:Core/Src/main.c **** 
 1167              		.loc 1 582 1 view -0
 1168              		.cfi_startproc
 1169              		@ args = 0, pretend = 0, frame = 24
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 43


 1170              		@ frame_needed = 0, uses_anonymous_args = 0
 1171 0000 00B5     		push	{lr}
 1172              		.cfi_def_cfa_offset 4
 1173              		.cfi_offset 14, -4
 1174 0002 87B0     		sub	sp, sp, #28
 1175              		.cfi_def_cfa_offset 32
 588:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1176              		.loc 1 588 3 view .LVU295
 588:Core/Src/main.c ****   TIM_MasterConfigTypeDef sMasterConfig = {0};
 1177              		.loc 1 588 26 is_stmt 0 view .LVU296
 1178 0004 1022     		movs	r2, #16
 1179 0006 0021     		movs	r1, #0
 1180 0008 02A8     		add	r0, sp, #8
 1181 000a FFF7FEFF 		bl	memset
 1182              	.LVL70:
 589:Core/Src/main.c **** 
 1183              		.loc 1 589 3 is_stmt 1 view .LVU297
 589:Core/Src/main.c **** 
 1184              		.loc 1 589 27 is_stmt 0 view .LVU298
 1185 000e 0822     		movs	r2, #8
 1186 0010 0021     		movs	r1, #0
 1187 0012 6846     		mov	r0, sp
 1188 0014 FFF7FEFF 		bl	memset
 1189              	.LVL71:
 594:Core/Src/main.c ****   htim2.Init.Prescaler = 2000;
 1190              		.loc 1 594 3 is_stmt 1 view .LVU299
 594:Core/Src/main.c ****   htim2.Init.Prescaler = 2000;
 1191              		.loc 1 594 18 is_stmt 0 view .LVU300
 1192 0018 1648     		ldr	r0, .L66
 1193 001a 8023     		movs	r3, #128
 1194 001c DB05     		lsls	r3, r3, #23
 1195 001e 0360     		str	r3, [r0]
 595:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1196              		.loc 1 595 3 is_stmt 1 view .LVU301
 595:Core/Src/main.c ****   htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 1197              		.loc 1 595 24 is_stmt 0 view .LVU302
 1198 0020 FA23     		movs	r3, #250
 1199 0022 DB00     		lsls	r3, r3, #3
 1200 0024 4360     		str	r3, [r0, #4]
 596:Core/Src/main.c ****   htim2.Init.Period = 1000;
 1201              		.loc 1 596 3 is_stmt 1 view .LVU303
 596:Core/Src/main.c ****   htim2.Init.Period = 1000;
 1202              		.loc 1 596 26 is_stmt 0 view .LVU304
 1203 0026 0023     		movs	r3, #0
 1204 0028 8360     		str	r3, [r0, #8]
 597:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1205              		.loc 1 597 3 is_stmt 1 view .LVU305
 597:Core/Src/main.c ****   htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 1206              		.loc 1 597 21 is_stmt 0 view .LVU306
 1207 002a FA22     		movs	r2, #250
 1208 002c 9200     		lsls	r2, r2, #2
 1209 002e C260     		str	r2, [r0, #12]
 598:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1210              		.loc 1 598 3 is_stmt 1 view .LVU307
 598:Core/Src/main.c ****   htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 1211              		.loc 1 598 28 is_stmt 0 view .LVU308
 1212 0030 0361     		str	r3, [r0, #16]
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 44


 599:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1213              		.loc 1 599 3 is_stmt 1 view .LVU309
 599:Core/Src/main.c ****   if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 1214              		.loc 1 599 32 is_stmt 0 view .LVU310
 1215 0032 8033     		adds	r3, r3, #128
 1216 0034 4361     		str	r3, [r0, #20]
 600:Core/Src/main.c ****   {
 1217              		.loc 1 600 3 is_stmt 1 view .LVU311
 600:Core/Src/main.c ****   {
 1218              		.loc 1 600 7 is_stmt 0 view .LVU312
 1219 0036 FFF7FEFF 		bl	HAL_TIM_Base_Init
 1220              	.LVL72:
 600:Core/Src/main.c ****   {
 1221              		.loc 1 600 6 view .LVU313
 1222 003a 0028     		cmp	r0, #0
 1223 003c 13D1     		bne	.L63
 604:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1224              		.loc 1 604 3 is_stmt 1 view .LVU314
 604:Core/Src/main.c ****   if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 1225              		.loc 1 604 34 is_stmt 0 view .LVU315
 1226 003e 8023     		movs	r3, #128
 1227 0040 5B01     		lsls	r3, r3, #5
 1228 0042 0293     		str	r3, [sp, #8]
 605:Core/Src/main.c ****   {
 1229              		.loc 1 605 3 is_stmt 1 view .LVU316
 605:Core/Src/main.c ****   {
 1230              		.loc 1 605 7 is_stmt 0 view .LVU317
 1231 0044 0B48     		ldr	r0, .L66
 1232 0046 02A9     		add	r1, sp, #8
 1233 0048 FFF7FEFF 		bl	HAL_TIM_ConfigClockSource
 1234              	.LVL73:
 605:Core/Src/main.c ****   {
 1235              		.loc 1 605 6 view .LVU318
 1236 004c 0028     		cmp	r0, #0
 1237 004e 0CD1     		bne	.L64
 609:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1238              		.loc 1 609 3 is_stmt 1 view .LVU319
 609:Core/Src/main.c ****   sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 1239              		.loc 1 609 37 is_stmt 0 view .LVU320
 1240 0050 0023     		movs	r3, #0
 1241 0052 0093     		str	r3, [sp]
 610:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1242              		.loc 1 610 3 is_stmt 1 view .LVU321
 610:Core/Src/main.c ****   if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 1243              		.loc 1 610 33 is_stmt 0 view .LVU322
 1244 0054 0193     		str	r3, [sp, #4]
 611:Core/Src/main.c ****   {
 1245              		.loc 1 611 3 is_stmt 1 view .LVU323
 611:Core/Src/main.c ****   {
 1246              		.loc 1 611 7 is_stmt 0 view .LVU324
 1247 0056 0748     		ldr	r0, .L66
 1248 0058 6946     		mov	r1, sp
 1249 005a FFF7FEFF 		bl	HAL_TIMEx_MasterConfigSynchronization
 1250              	.LVL74:
 611:Core/Src/main.c ****   {
 1251              		.loc 1 611 6 view .LVU325
 1252 005e 0028     		cmp	r0, #0
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 45


 1253 0060 05D1     		bne	.L65
 619:Core/Src/main.c **** 
 1254              		.loc 1 619 1 view .LVU326
 1255 0062 07B0     		add	sp, sp, #28
 1256              		@ sp needed
 1257 0064 00BD     		pop	{pc}
 1258              	.L63:
 602:Core/Src/main.c ****   }
 1259              		.loc 1 602 5 is_stmt 1 view .LVU327
 1260 0066 FFF7FEFF 		bl	Error_Handler
 1261              	.LVL75:
 1262              	.L64:
 607:Core/Src/main.c ****   }
 1263              		.loc 1 607 5 view .LVU328
 1264 006a FFF7FEFF 		bl	Error_Handler
 1265              	.LVL76:
 1266              	.L65:
 613:Core/Src/main.c ****   }
 1267              		.loc 1 613 5 view .LVU329
 1268 006e FFF7FEFF 		bl	Error_Handler
 1269              	.LVL77:
 1270              	.L67:
 1271 0072 C046     		.align	2
 1272              	.L66:
 1273 0074 00000000 		.word	htim2
 1274              		.cfi_endproc
 1275              	.LFE44:
 1277              		.section	.text.SystemClock_Config,"ax",%progbits
 1278              		.align	1
 1279              		.global	SystemClock_Config
 1280              		.syntax unified
 1281              		.code	16
 1282              		.thumb_func
 1284              	SystemClock_Config:
 1285              	.LFB41:
 415:Core/Src/main.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 1286              		.loc 1 415 1 view -0
 1287              		.cfi_startproc
 1288              		@ args = 0, pretend = 0, frame = 96
 1289              		@ frame_needed = 0, uses_anonymous_args = 0
 1290 0000 00B5     		push	{lr}
 1291              		.cfi_def_cfa_offset 4
 1292              		.cfi_offset 14, -4
 1293 0002 99B0     		sub	sp, sp, #100
 1294              		.cfi_def_cfa_offset 104
 416:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1295              		.loc 1 416 3 view .LVU331
 416:Core/Src/main.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 1296              		.loc 1 416 22 is_stmt 0 view .LVU332
 1297 0004 3422     		movs	r2, #52
 1298 0006 0021     		movs	r1, #0
 1299 0008 0BA8     		add	r0, sp, #44
 1300 000a FFF7FEFF 		bl	memset
 1301              	.LVL78:
 417:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 1302              		.loc 1 417 3 is_stmt 1 view .LVU333
 417:Core/Src/main.c ****   RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 46


 1303              		.loc 1 417 22 is_stmt 0 view .LVU334
 1304 000e 1422     		movs	r2, #20
 1305 0010 0021     		movs	r1, #0
 1306 0012 06A8     		add	r0, sp, #24
 1307 0014 FFF7FEFF 		bl	memset
 1308              	.LVL79:
 418:Core/Src/main.c **** 
 1309              		.loc 1 418 3 is_stmt 1 view .LVU335
 418:Core/Src/main.c **** 
 1310              		.loc 1 418 28 is_stmt 0 view .LVU336
 1311 0018 1822     		movs	r2, #24
 1312 001a 0021     		movs	r1, #0
 1313 001c 6846     		mov	r0, sp
 1314 001e FFF7FEFF 		bl	memset
 1315              	.LVL80:
 422:Core/Src/main.c **** 
 1316              		.loc 1 422 3 is_stmt 1 view .LVU337
 1317 0022 1A49     		ldr	r1, .L75
 1318 0024 0A68     		ldr	r2, [r1]
 1319 0026 1A4B     		ldr	r3, .L75+4
 1320 0028 1A40     		ands	r2, r3
 1321 002a 8023     		movs	r3, #128
 1322 002c 1B01     		lsls	r3, r3, #4
 1323 002e 1343     		orrs	r3, r2
 1324 0030 0B60     		str	r3, [r1]
 427:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1325              		.loc 1 427 3 view .LVU338
 427:Core/Src/main.c ****   RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 1326              		.loc 1 427 36 is_stmt 0 view .LVU339
 1327 0032 1023     		movs	r3, #16
 1328 0034 0B93     		str	r3, [sp, #44]
 428:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1329              		.loc 1 428 3 is_stmt 1 view .LVU340
 428:Core/Src/main.c ****   RCC_OscInitStruct.MSICalibrationValue = 0;
 1330              		.loc 1 428 30 is_stmt 0 view .LVU341
 1331 0036 0F3B     		subs	r3, r3, #15
 1332 0038 1193     		str	r3, [sp, #68]
 429:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 1333              		.loc 1 429 3 is_stmt 1 view .LVU342
 429:Core/Src/main.c ****   RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 1334              		.loc 1 429 41 is_stmt 0 view .LVU343
 1335 003a 0023     		movs	r3, #0
 1336 003c 1293     		str	r3, [sp, #72]
 430:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1337              		.loc 1 430 3 is_stmt 1 view .LVU344
 430:Core/Src/main.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 1338              		.loc 1 430 35 is_stmt 0 view .LVU345
 1339 003e A022     		movs	r2, #160
 1340 0040 1202     		lsls	r2, r2, #8
 1341 0042 1392     		str	r2, [sp, #76]
 431:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1342              		.loc 1 431 3 is_stmt 1 view .LVU346
 431:Core/Src/main.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 1343              		.loc 1 431 34 is_stmt 0 view .LVU347
 1344 0044 1493     		str	r3, [sp, #80]
 432:Core/Src/main.c ****   {
 1345              		.loc 1 432 3 is_stmt 1 view .LVU348
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 47


 432:Core/Src/main.c ****   {
 1346              		.loc 1 432 7 is_stmt 0 view .LVU349
 1347 0046 0BA8     		add	r0, sp, #44
 1348 0048 FFF7FEFF 		bl	HAL_RCC_OscConfig
 1349              	.LVL81:
 432:Core/Src/main.c ****   {
 1350              		.loc 1 432 6 view .LVU350
 1351 004c 0028     		cmp	r0, #0
 1352 004e 17D1     		bne	.L72
 439:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1353              		.loc 1 439 3 is_stmt 1 view .LVU351
 439:Core/Src/main.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 1354              		.loc 1 439 31 is_stmt 0 view .LVU352
 1355 0050 0F23     		movs	r3, #15
 1356 0052 0693     		str	r3, [sp, #24]
 441:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1357              		.loc 1 441 3 is_stmt 1 view .LVU353
 441:Core/Src/main.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 1358              		.loc 1 441 34 is_stmt 0 view .LVU354
 1359 0054 0023     		movs	r3, #0
 1360 0056 0793     		str	r3, [sp, #28]
 442:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1361              		.loc 1 442 3 is_stmt 1 view .LVU355
 442:Core/Src/main.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 1362              		.loc 1 442 35 is_stmt 0 view .LVU356
 1363 0058 0893     		str	r3, [sp, #32]
 443:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1364              		.loc 1 443 3 is_stmt 1 view .LVU357
 443:Core/Src/main.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 1365              		.loc 1 443 36 is_stmt 0 view .LVU358
 1366 005a 0993     		str	r3, [sp, #36]
 444:Core/Src/main.c **** 
 1367              		.loc 1 444 3 is_stmt 1 view .LVU359
 444:Core/Src/main.c **** 
 1368              		.loc 1 444 36 is_stmt 0 view .LVU360
 1369 005c 0A93     		str	r3, [sp, #40]
 446:Core/Src/main.c ****   {
 1370              		.loc 1 446 3 is_stmt 1 view .LVU361
 446:Core/Src/main.c ****   {
 1371              		.loc 1 446 7 is_stmt 0 view .LVU362
 1372 005e 0021     		movs	r1, #0
 1373 0060 06A8     		add	r0, sp, #24
 1374 0062 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 1375              	.LVL82:
 446:Core/Src/main.c ****   {
 1376              		.loc 1 446 6 view .LVU363
 1377 0066 0028     		cmp	r0, #0
 1378 0068 0CD1     		bne	.L73
 450:Core/Src/main.c ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 1379              		.loc 1 450 3 is_stmt 1 view .LVU364
 450:Core/Src/main.c ****   PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 1380              		.loc 1 450 38 is_stmt 0 view .LVU365
 1381 006a 0223     		movs	r3, #2
 1382 006c 0093     		str	r3, [sp]
 451:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 1383              		.loc 1 451 3 is_stmt 1 view .LVU366
 451:Core/Src/main.c ****   if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 48


 1384              		.loc 1 451 38 is_stmt 0 view .LVU367
 1385 006e 0023     		movs	r3, #0
 1386 0070 0293     		str	r3, [sp, #8]
 452:Core/Src/main.c ****   {
 1387              		.loc 1 452 3 is_stmt 1 view .LVU368
 452:Core/Src/main.c ****   {
 1388              		.loc 1 452 7 is_stmt 0 view .LVU369
 1389 0072 6846     		mov	r0, sp
 1390 0074 FFF7FEFF 		bl	HAL_RCCEx_PeriphCLKConfig
 1391              	.LVL83:
 452:Core/Src/main.c ****   {
 1392              		.loc 1 452 6 view .LVU370
 1393 0078 0028     		cmp	r0, #0
 1394 007a 05D1     		bne	.L74
 456:Core/Src/main.c **** 
 1395              		.loc 1 456 1 view .LVU371
 1396 007c 19B0     		add	sp, sp, #100
 1397              		@ sp needed
 1398 007e 00BD     		pop	{pc}
 1399              	.L72:
 434:Core/Src/main.c ****   }
 1400              		.loc 1 434 5 is_stmt 1 view .LVU372
 1401 0080 FFF7FEFF 		bl	Error_Handler
 1402              	.LVL84:
 1403              	.L73:
 448:Core/Src/main.c ****   }
 1404              		.loc 1 448 5 view .LVU373
 1405 0084 FFF7FEFF 		bl	Error_Handler
 1406              	.LVL85:
 1407              	.L74:
 454:Core/Src/main.c ****   }
 1408              		.loc 1 454 5 view .LVU374
 1409 0088 FFF7FEFF 		bl	Error_Handler
 1410              	.LVL86:
 1411              	.L76:
 1412              		.align	2
 1413              	.L75:
 1414 008c 00700040 		.word	1073770496
 1415 0090 FFE7FFFF 		.word	-6145
 1416              		.cfi_endproc
 1417              	.LFE41:
 1419              		.section	.text.main,"ax",%progbits
 1420              		.align	1
 1421              		.global	main
 1422              		.syntax unified
 1423              		.code	16
 1424              		.thumb_func
 1426              	main:
 1427              	.LFB40:
 146:Core/Src/main.c ****   /* USER CODE BEGIN 1 */
 1428              		.loc 1 146 1 view -0
 1429              		.cfi_startproc
 1430              		@ args = 0, pretend = 0, frame = 16
 1431              		@ frame_needed = 0, uses_anonymous_args = 0
 1432 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 1433              		.cfi_def_cfa_offset 20
 1434              		.cfi_offset 4, -20
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 49


 1435              		.cfi_offset 5, -16
 1436              		.cfi_offset 6, -12
 1437              		.cfi_offset 7, -8
 1438              		.cfi_offset 14, -4
 1439 0002 C646     		mov	lr, r8
 1440 0004 00B5     		push	{lr}
 1441              		.cfi_def_cfa_offset 24
 1442              		.cfi_offset 8, -24
 1443 0006 84B0     		sub	sp, sp, #16
 1444              		.cfi_def_cfa_offset 40
 154:Core/Src/main.c **** 
 1445              		.loc 1 154 3 view .LVU376
 1446 0008 FFF7FEFF 		bl	HAL_Init
 1447              	.LVL87:
 161:Core/Src/main.c **** 
 1448              		.loc 1 161 3 view .LVU377
 1449 000c FFF7FEFF 		bl	SystemClock_Config
 1450              	.LVL88:
 168:Core/Src/main.c ****   MX_ADC_Init();
 1451              		.loc 1 168 3 view .LVU378
 1452 0010 FFF7FEFF 		bl	MX_GPIO_Init
 1453              	.LVL89:
 169:Core/Src/main.c ****   MX_USART2_UART_Init();
 1454              		.loc 1 169 3 view .LVU379
 1455 0014 FFF7FEFF 		bl	MX_ADC_Init
 1456              	.LVL90:
 170:Core/Src/main.c ****   MX_SPI1_Init();
 1457              		.loc 1 170 3 view .LVU380
 1458 0018 FFF7FEFF 		bl	MX_USART2_UART_Init
 1459              	.LVL91:
 171:Core/Src/main.c ****   MX_TIM2_Init();
 1460              		.loc 1 171 3 view .LVU381
 1461 001c FFF7FEFF 		bl	MX_SPI1_Init
 1462              	.LVL92:
 172:Core/Src/main.c ****   /* USER CODE BEGIN 2 */
 1463              		.loc 1 172 3 view .LVU382
 1464 0020 FFF7FEFF 		bl	MX_TIM2_Init
 1465              	.LVL93:
 176:Core/Src/main.c **** 
 1466              		.loc 1 176 3 view .LVU383
 1467 0024 A648     		ldr	r0, .L97
 1468 0026 0021     		movs	r1, #0
 1469 0028 FFF7FEFF 		bl	HAL_ADCEx_Calibration_Start
 1470              	.LVL94:
 179:Core/Src/main.c **** 
 1471              		.loc 1 179 3 view .LVU384
 1472 002c A548     		ldr	r0, .L97+4
 1473 002e FFF7FEFF 		bl	HAL_TIM_Base_Start_IT
 1474              	.LVL95:
 182:Core/Src/main.c **** 
 1475              		.loc 1 182 3 view .LVU385
 1476 0032 FA20     		movs	r0, #250
 1477 0034 4000     		lsls	r0, r0, #1
 1478 0036 0100     		movs	r1, r0
 1479 0038 FFF7FEFF 		bl	led_blink
 1480              	.LVL96:
 1481 003c 2BE0     		b	.L93
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 50


 1482              	.L87:
 249:Core/Src/main.c **** 
 1483              		.loc 1 249 9 view .LVU386
 1484 003e FFF7FEFF 		bl	Disable_buck_converter
 1485              	.LVL97:
 252:Core/Src/main.c ****         control_signal = PID_UPPER_THRESHOLD;
 1486              		.loc 1 252 9 view .LVU387
 252:Core/Src/main.c ****         control_signal = PID_UPPER_THRESHOLD;
 1487              		.loc 1 252 20 is_stmt 0 view .LVU388
 1488 0042 A14A     		ldr	r2, .L97+8
 1489 0044 1E23     		movs	r3, #30
 1490 0046 1380     		strh	r3, [r2]
 253:Core/Src/main.c ****         prev_control_signal = PID_UPPER_THRESHOLD;
 1491              		.loc 1 253 9 is_stmt 1 view .LVU389
 253:Core/Src/main.c ****         prev_control_signal = PID_UPPER_THRESHOLD;
 1492              		.loc 1 253 24 is_stmt 0 view .LVU390
 1493 0048 A04A     		ldr	r2, .L97+12
 1494 004a 1360     		str	r3, [r2]
 254:Core/Src/main.c ****         integral = PID_UPPER_THRESHOLD*1000;
 1495              		.loc 1 254 9 is_stmt 1 view .LVU391
 254:Core/Src/main.c ****         integral = PID_UPPER_THRESHOLD*1000;
 1496              		.loc 1 254 29 is_stmt 0 view .LVU392
 1497 004c A04A     		ldr	r2, .L97+16
 1498 004e 1360     		str	r3, [r2]
 255:Core/Src/main.c ****         prev_error = 0;
 1499              		.loc 1 255 9 is_stmt 1 view .LVU393
 255:Core/Src/main.c ****         prev_error = 0;
 1500              		.loc 1 255 18 is_stmt 0 view .LVU394
 1501 0050 A04B     		ldr	r3, .L97+20
 1502 0052 A14A     		ldr	r2, .L97+24
 1503 0054 1A60     		str	r2, [r3]
 256:Core/Src/main.c **** 
 1504              		.loc 1 256 9 is_stmt 1 view .LVU395
 256:Core/Src/main.c **** 
 1505              		.loc 1 256 20 is_stmt 0 view .LVU396
 1506 0056 A14B     		ldr	r3, .L97+28
 1507 0058 0022     		movs	r2, #0
 1508 005a 1A60     		str	r2, [r3]
 259:Core/Src/main.c ****           current_state = START_CHARGING;
 1509              		.loc 1 259 9 is_stmt 1 view .LVU397
 259:Core/Src/main.c ****           current_state = START_CHARGING;
 1510              		.loc 1 259 43 is_stmt 0 view .LVU398
 1511 005c A04B     		ldr	r3, .L97+32
 1512 005e 1B88     		ldrh	r3, [r3]
 1513 0060 A04A     		ldr	r2, .L97+36
 1514 0062 9446     		mov	ip, r2
 1515 0064 6344     		add	r3, r3, ip
 1516 0066 9BB2     		uxth	r3, r3
 259:Core/Src/main.c ****           current_state = START_CHARGING;
 1517              		.loc 1 259 11 view .LVU399
 1518 0068 9F4A     		ldr	r2, .L97+40
 1519 006a 9342     		cmp	r3, r2
 1520 006c 03D8     		bhi	.L88
 260:Core/Src/main.c ****           break;
 1521              		.loc 1 260 11 is_stmt 1 view .LVU400
 260:Core/Src/main.c ****           break;
 1522              		.loc 1 260 25 is_stmt 0 view .LVU401
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 51


 1523 006e 9F4B     		ldr	r3, .L97+44
 1524 0070 0122     		movs	r2, #1
 1525 0072 1A70     		strb	r2, [r3]
 261:Core/Src/main.c ****         }
 1526              		.loc 1 261 11 is_stmt 1 view .LVU402
 1527 0074 0AE0     		b	.L89
 1528              	.L88:
 265:Core/Src/main.c ****       break;
 1529              		.loc 1 265 9 view .LVU403
 1530 0076 FA20     		movs	r0, #250
 1531 0078 4000     		lsls	r0, r0, #1
 1532 007a 0100     		movs	r1, r0
 1533 007c FFF7FEFF 		bl	led_blink_nb
 1534              	.LVL98:
 266:Core/Src/main.c ****       case START_CHARGING: 
 1535              		.loc 1 266 7 view .LVU404
 1536 0080 04E0     		b	.L89
 1537              	.L86:
 269:Core/Src/main.c **** 
 1538              		.loc 1 269 9 view .LVU405
 1539 0082 FFF7FEFF 		bl	Enable_buck_converter
 1540              	.LVL99:
 272:Core/Src/main.c ****       break;
 1541              		.loc 1 272 9 view .LVU406
 272:Core/Src/main.c ****       break;
 1542              		.loc 1 272 23 is_stmt 0 view .LVU407
 1543 0086 994B     		ldr	r3, .L97+44
 1544 0088 0222     		movs	r2, #2
 1545 008a 1A70     		strb	r2, [r3]
 273:Core/Src/main.c ****       case CHARGING_PID:
 1546              		.loc 1 273 7 is_stmt 1 view .LVU408
 1547              	.L89:
 387:Core/Src/main.c ****       send_status = 0;
 1548              		.loc 1 387 5 view .LVU409
 387:Core/Src/main.c ****       send_status = 0;
 1549              		.loc 1 387 8 is_stmt 0 view .LVU410
 1550 008c 984B     		ldr	r3, .L97+48
 1551 008e 1B78     		ldrb	r3, [r3]
 387:Core/Src/main.c ****       send_status = 0;
 1552              		.loc 1 387 7 view .LVU411
 1553 0090 002B     		cmp	r3, #0
 1554 0092 00D0     		beq	.LCB1246
 1555 0094 E9E0     		b	.L95	@long jump
 1556              	.LCB1246:
 1557              	.L93:
 188:Core/Src/main.c ****   {
 1558              		.loc 1 188 3 is_stmt 1 view .LVU412
 195:Core/Src/main.c **** 
 1559              		.loc 1 195 5 view .LVU413
 1560 0096 6420     		movs	r0, #100
 1561 0098 FFF7FEFF 		bl	HAL_Delay
 1562              	.LVL100:
 198:Core/Src/main.c ****     
 1563              		.loc 1 198 3 view .LVU414
 1564 009c 884C     		ldr	r4, .L97
 1565 009e 2000     		movs	r0, r4
 1566 00a0 FFF7FEFF 		bl	HAL_ADC_Start
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 52


 1567              	.LVL101:
 201:Core/Src/main.c **** 		ADC_CH5 = HAL_ADC_GetValue(&hadc);
 1568              		.loc 1 201 5 view .LVU415
 1569 00a4 6421     		movs	r1, #100
 1570 00a6 2000     		movs	r0, r4
 1571 00a8 FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1572              	.LVL102:
 202:Core/Src/main.c **** 
 1573              		.loc 1 202 3 view .LVU416
 202:Core/Src/main.c **** 
 1574              		.loc 1 202 13 is_stmt 0 view .LVU417
 1575 00ac 2000     		movs	r0, r4
 1576 00ae FFF7FEFF 		bl	HAL_ADC_GetValue
 1577              	.LVL103:
 202:Core/Src/main.c **** 
 1578              		.loc 1 202 11 view .LVU418
 1579 00b2 904D     		ldr	r5, .L97+52
 1580 00b4 2880     		strh	r0, [r5]
 205:Core/Src/main.c **** 		ADC_CH6 = HAL_ADC_GetValue(&hadc);
 1581              		.loc 1 205 5 is_stmt 1 view .LVU419
 1582 00b6 6421     		movs	r1, #100
 1583 00b8 2000     		movs	r0, r4
 1584 00ba FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1585              	.LVL104:
 206:Core/Src/main.c **** 
 1586              		.loc 1 206 3 view .LVU420
 206:Core/Src/main.c **** 
 1587              		.loc 1 206 13 is_stmt 0 view .LVU421
 1588 00be 2000     		movs	r0, r4
 1589 00c0 FFF7FEFF 		bl	HAL_ADC_GetValue
 1590              	.LVL105:
 206:Core/Src/main.c **** 
 1591              		.loc 1 206 11 view .LVU422
 1592 00c4 8C4E     		ldr	r6, .L97+56
 1593 00c6 3080     		strh	r0, [r6]
 209:Core/Src/main.c **** 		ADC_CH7 = HAL_ADC_GetValue(&hadc);
 1594              		.loc 1 209 5 is_stmt 1 view .LVU423
 1595 00c8 6421     		movs	r1, #100
 1596 00ca 2000     		movs	r0, r4
 1597 00cc FFF7FEFF 		bl	HAL_ADC_PollForConversion
 1598              	.LVL106:
 210:Core/Src/main.c **** 
 1599              		.loc 1 210 3 view .LVU424
 210:Core/Src/main.c **** 
 1600              		.loc 1 210 13 is_stmt 0 view .LVU425
 1601 00d0 2000     		movs	r0, r4
 1602 00d2 FFF7FEFF 		bl	HAL_ADC_GetValue
 1603              	.LVL107:
 210:Core/Src/main.c **** 
 1604              		.loc 1 210 11 view .LVU426
 1605 00d6 894F     		ldr	r7, .L97+60
 1606 00d8 3880     		strh	r0, [r7]
 213:Core/Src/main.c **** 		ADC_REF = HAL_ADC_GetValue(&hadc);
 1607              		.loc 1 213 5 is_stmt 1 view .LVU427
 1608 00da 6421     		movs	r1, #100
 1609 00dc 2000     		movs	r0, r4
 1610 00de FFF7FEFF 		bl	HAL_ADC_PollForConversion
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 53


 1611              	.LVL108:
 214:Core/Src/main.c **** 
 1612              		.loc 1 214 3 view .LVU428
 214:Core/Src/main.c **** 
 1613              		.loc 1 214 13 is_stmt 0 view .LVU429
 1614 00e2 2000     		movs	r0, r4
 1615 00e4 FFF7FEFF 		bl	HAL_ADC_GetValue
 1616              	.LVL109:
 214:Core/Src/main.c **** 
 1617              		.loc 1 214 11 view .LVU430
 1618 00e8 854B     		ldr	r3, .L97+64
 1619 00ea 9846     		mov	r8, r3
 1620 00ec 1880     		strh	r0, [r3]
 217:Core/Src/main.c **** 
 1621              		.loc 1 217 5 is_stmt 1 view .LVU431
 1622 00ee 2000     		movs	r0, r4
 1623 00f0 FFF7FEFF 		bl	HAL_ADC_Stop
 1624              	.LVL110:
 220:Core/Src/main.c **** 
 1625              		.loc 1 220 5 view .LVU432
 220:Core/Src/main.c **** 
 1626              		.loc 1 220 34 is_stmt 0 view .LVU433
 1627 00f4 4346     		mov	r3, r8
 1628 00f6 1988     		ldrh	r1, [r3]
 1629 00f8 9620     		movs	r0, #150
 1630 00fa C003     		lsls	r0, r0, #15
 1631 00fc FFF7FEFF 		bl	__aeabi_idiv
 1632              	.LVL111:
 220:Core/Src/main.c **** 
 1633              		.loc 1 220 23 view .LVU434
 1634 0100 804B     		ldr	r3, .L97+68
 1635 0102 1880     		strh	r0, [r3]
 223:Core/Src/main.c **** 
 1636              		.loc 1 223 5 is_stmt 1 view .LVU435
 1637 0104 0004     		lsls	r0, r0, #16
 1638 0106 040C     		lsrs	r4, r0, #16
 223:Core/Src/main.c **** 
 1639              		.loc 1 223 31 is_stmt 0 view .LVU436
 1640 0108 2A88     		ldrh	r2, [r5]
 1641 010a 6243     		muls	r2, r4
 223:Core/Src/main.c **** 
 1642              		.loc 1 223 49 view .LVU437
 1643 010c D317     		asrs	r3, r2, #31
 1644 010e 1B05     		lsls	r3, r3, #20
 1645 0110 1B0D     		lsrs	r3, r3, #20
 1646 0112 9B18     		adds	r3, r3, r2
 1647 0114 1B13     		asrs	r3, r3, #12
 223:Core/Src/main.c **** 
 1648              		.loc 1 223 54 view .LVU438
 1649 0116 7C48     		ldr	r0, .L97+72
 1650 0118 5843     		muls	r0, r3
 223:Core/Src/main.c **** 
 1651              		.loc 1 223 61 view .LVU439
 1652 011a 7C49     		ldr	r1, .L97+76
 1653 011c FFF7FEFF 		bl	__aeabi_idiv
 1654              	.LVL112:
 223:Core/Src/main.c **** 
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 54


 1655              		.loc 1 223 22 view .LVU440
 1656 0120 85B2     		uxth	r5, r0
 1657 0122 6F4B     		ldr	r3, .L97+32
 1658 0124 1D80     		strh	r5, [r3]
 226:Core/Src/main.c **** 
 1659              		.loc 1 226 5 is_stmt 1 view .LVU441
 226:Core/Src/main.c **** 
 1660              		.loc 1 226 37 is_stmt 0 view .LVU442
 1661 0126 3A88     		ldrh	r2, [r7]
 1662 0128 6243     		muls	r2, r4
 226:Core/Src/main.c **** 
 1663              		.loc 1 226 55 view .LVU443
 1664 012a D317     		asrs	r3, r2, #31
 1665 012c 1B05     		lsls	r3, r3, #20
 1666 012e 1B0D     		lsrs	r3, r3, #20
 1667 0130 9B18     		adds	r3, r3, r2
 1668 0132 1B13     		asrs	r3, r3, #12
 226:Core/Src/main.c **** 
 1669              		.loc 1 226 60 view .LVU444
 1670 0134 7648     		ldr	r0, .L97+80
 1671 0136 5843     		muls	r0, r3
 226:Core/Src/main.c **** 
 1672              		.loc 1 226 66 view .LVU445
 1673 0138 7649     		ldr	r1, .L97+84
 1674 013a FFF7FEFF 		bl	__aeabi_idiv
 1675              	.LVL113:
 226:Core/Src/main.c **** 
 1676              		.loc 1 226 28 view .LVU446
 1677 013e 764B     		ldr	r3, .L97+88
 1678 0140 1880     		strh	r0, [r3]
 229:Core/Src/main.c **** 
 1679              		.loc 1 229 5 is_stmt 1 view .LVU447
 229:Core/Src/main.c **** 
 1680              		.loc 1 229 30 is_stmt 0 view .LVU448
 1681 0142 3388     		ldrh	r3, [r6]
 1682 0144 5C43     		muls	r4, r3
 229:Core/Src/main.c **** 
 1683              		.loc 1 229 48 view .LVU449
 1684 0146 E317     		asrs	r3, r4, #31
 1685 0148 1B05     		lsls	r3, r3, #20
 1686 014a 1B0D     		lsrs	r3, r3, #20
 1687 014c 1C19     		adds	r4, r3, r4
 1688 014e 2413     		asrs	r4, r4, #12
 229:Core/Src/main.c **** 
 1689              		.loc 1 229 53 view .LVU450
 1690 0150 6001     		lsls	r0, r4, #5
 1691 0152 001B     		subs	r0, r0, r4
 1692 0154 8000     		lsls	r0, r0, #2
 1693 0156 0019     		adds	r0, r0, r4
 1694 0158 C000     		lsls	r0, r0, #3
 229:Core/Src/main.c **** 
 1695              		.loc 1 229 58 view .LVU451
 1696 015a C321     		movs	r1, #195
 1697 015c 8900     		lsls	r1, r1, #2
 1698 015e FFF7FEFF 		bl	__aeabi_idiv
 1699              	.LVL114:
 229:Core/Src/main.c **** 
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 55


 1700              		.loc 1 229 21 view .LVU452
 1701 0162 6E4B     		ldr	r3, .L97+92
 1702 0164 1880     		strh	r0, [r3]
 232:Core/Src/main.c ****       current_state = OVER_VOLTAGE;
 1703              		.loc 1 232 5 is_stmt 1 view .LVU453
 232:Core/Src/main.c ****       current_state = OVER_VOLTAGE;
 1704              		.loc 1 232 7 is_stmt 0 view .LVU454
 1705 0166 6E4B     		ldr	r3, .L97+96
 1706 0168 9D42     		cmp	r5, r3
 1707 016a 02D9     		bls	.L78
 233:Core/Src/main.c ****     }
 1708              		.loc 1 233 7 is_stmt 1 view .LVU455
 233:Core/Src/main.c ****     }
 1709              		.loc 1 233 21 is_stmt 0 view .LVU456
 1710 016c 5F4B     		ldr	r3, .L97+44
 1711 016e 0522     		movs	r2, #5
 1712 0170 1A70     		strb	r2, [r3]
 1713              	.L78:
 242:Core/Src/main.c ****       current_state = SLEEP;
 1714              		.loc 1 242 5 is_stmt 1 view .LVU457
 242:Core/Src/main.c ****       current_state = SLEEP;
 1715              		.loc 1 242 7 is_stmt 0 view .LVU458
 1716 0172 FA23     		movs	r3, #250
 1717 0174 9B00     		lsls	r3, r3, #2
 1718 0176 9D42     		cmp	r5, r3
 1719 0178 02D2     		bcs	.L79
 243:Core/Src/main.c ****     }
 1720              		.loc 1 243 7 is_stmt 1 view .LVU459
 243:Core/Src/main.c ****     }
 1721              		.loc 1 243 21 is_stmt 0 view .LVU460
 1722 017a 5C4B     		ldr	r3, .L97+44
 1723 017c 0622     		movs	r2, #6
 1724 017e 1A70     		strb	r2, [r3]
 1725              	.L79:
 246:Core/Src/main.c ****       case INIT:
 1726              		.loc 1 246 5 is_stmt 1 view .LVU461
 1727 0180 5A4B     		ldr	r3, .L97+44
 1728 0182 1A78     		ldrb	r2, [r3]
 1729 0184 062A     		cmp	r2, #6
 1730 0186 6CD8     		bhi	.L80
 1731 0188 9300     		lsls	r3, r2, #2
 1732 018a 664A     		ldr	r2, .L97+100
 1733 018c D358     		ldr	r3, [r2, r3]
 1734 018e 9F46     		mov	pc, r3
 1735              		.section	.rodata.main,"a",%progbits
 1736              		.align	2
 1737              	.L82:
 1738 0000 3E000000 		.word	.L87
 1739 0004 82000000 		.word	.L86
 1740 0008 90010000 		.word	.L85
 1741 000c 62020000 		.word	.L80
 1742 0010 08020000 		.word	.L84
 1743 0014 22020000 		.word	.L83
 1744 0018 42020000 		.word	.L81
 1745              		.section	.text.main
 1746              	.L85:
 276:Core/Src/main.c ****         
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 56


 1747              		.loc 1 276 9 view .LVU462
 1748 0190 E121     		movs	r1, #225
 1749 0192 8900     		lsls	r1, r1, #2
 1750 0194 6420     		movs	r0, #100
 1751 0196 FFF7FEFF 		bl	led_blink_nb
 1752              	.LVL115:
 279:Core/Src/main.c ****           pid_result = pid_controller(input_voltage_mv);
 1753              		.loc 1 279 9 view .LVU463
 279:Core/Src/main.c ****           pid_result = pid_controller(input_voltage_mv);
 1754              		.loc 1 279 18 is_stmt 0 view .LVU464
 1755 019a 634B     		ldr	r3, .L97+104
 1756 019c 1B78     		ldrb	r3, [r3]
 279:Core/Src/main.c ****           pid_result = pid_controller(input_voltage_mv);
 1757              		.loc 1 279 11 view .LVU465
 1758 019e 052B     		cmp	r3, #5
 1759 01a0 10D0     		beq	.L96
 1760              	.L90:
 283:Core/Src/main.c **** 
 1761              		.loc 1 283 9 is_stmt 1 view .LVU466
 283:Core/Src/main.c **** 
 1762              		.loc 1 283 14 is_stmt 0 view .LVU467
 1763 01a2 614A     		ldr	r2, .L97+104
 1764 01a4 1378     		ldrb	r3, [r2]
 1765 01a6 0133     		adds	r3, r3, #1
 1766 01a8 1370     		strb	r3, [r2]
 286:Core/Src/main.c **** 
 1767              		.loc 1 286 9 is_stmt 1 view .LVU468
 1768 01aa 474B     		ldr	r3, .L97+8
 1769 01ac 1878     		ldrb	r0, [r3]
 1770 01ae FFF7FEFF 		bl	change_potentiometer
 1771              	.LVL116:
 289:Core/Src/main.c ****           current_state = INIT;
 1772              		.loc 1 289 9 view .LVU469
 289:Core/Src/main.c ****           current_state = INIT;
 1773              		.loc 1 289 29 is_stmt 0 view .LVU470
 1774 01b2 4B4B     		ldr	r3, .L97+32
 1775 01b4 1A88     		ldrh	r2, [r3]
 289:Core/Src/main.c ****           current_state = INIT;
 1776              		.loc 1 289 11 view .LVU471
 1777 01b6 5D4B     		ldr	r3, .L97+108
 1778 01b8 9A42     		cmp	r2, r3
 1779 01ba 0DD8     		bhi	.L91
 290:Core/Src/main.c ****           
 1780              		.loc 1 290 11 is_stmt 1 view .LVU472
 290:Core/Src/main.c ****           
 1781              		.loc 1 290 25 is_stmt 0 view .LVU473
 1782 01bc 4B4B     		ldr	r3, .L97+44
 1783 01be 0022     		movs	r2, #0
 1784 01c0 1A70     		strb	r2, [r3]
 302:Core/Src/main.c ****         }
 1785              		.loc 1 302 11 is_stmt 1 view .LVU474
 1786 01c2 63E7     		b	.L89
 1787              	.L96:
 280:Core/Src/main.c ****           check = 0;
 1788              		.loc 1 280 11 view .LVU475
 280:Core/Src/main.c ****           check = 0;
 1789              		.loc 1 280 24 is_stmt 0 view .LVU476
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 57


 1790 01c4 464B     		ldr	r3, .L97+32
 1791 01c6 1888     		ldrh	r0, [r3]
 1792 01c8 FFF7FEFF 		bl	pid_controller
 1793              	.LVL117:
 280:Core/Src/main.c ****           check = 0;
 1794              		.loc 1 280 22 view .LVU477
 1795 01cc 3E4B     		ldr	r3, .L97+8
 1796 01ce 1880     		strh	r0, [r3]
 281:Core/Src/main.c ****         }
 1797              		.loc 1 281 11 is_stmt 1 view .LVU478
 281:Core/Src/main.c ****         }
 1798              		.loc 1 281 17 is_stmt 0 view .LVU479
 1799 01d0 554B     		ldr	r3, .L97+104
 1800 01d2 0022     		movs	r2, #0
 1801 01d4 1A70     		strb	r2, [r3]
 1802 01d6 E4E7     		b	.L90
 1803              	.L91:
 306:Core/Src/main.c ****           timer_check = 0;
 1804              		.loc 1 306 9 is_stmt 1 view .LVU480
 306:Core/Src/main.c ****           timer_check = 0;
 1805              		.loc 1 306 28 is_stmt 0 view .LVU481
 1806 01d8 504B     		ldr	r3, .L97+92
 1807 01da 1B88     		ldrh	r3, [r3]
 306:Core/Src/main.c ****           timer_check = 0;
 1808              		.loc 1 306 11 view .LVU482
 1809 01dc C72B     		cmp	r3, #199
 1810 01de 0ED8     		bhi	.L92
 306:Core/Src/main.c ****           timer_check = 0;
 1811              		.loc 1 306 57 discriminator 1 view .LVU483
 1812 01e0 534B     		ldr	r3, .L97+112
 1813 01e2 1B88     		ldrh	r3, [r3]
 306:Core/Src/main.c ****           timer_check = 0;
 1814              		.loc 1 306 42 discriminator 1 view .LVU484
 1815 01e4 642B     		cmp	r3, #100
 1816 01e6 0AD9     		bls	.L92
 306:Core/Src/main.c ****           timer_check = 0;
 1817              		.loc 1 306 84 discriminator 2 view .LVU485
 1818 01e8 464B     		ldr	r3, .L97+68
 1819 01ea 1A88     		ldrh	r2, [r3]
 306:Core/Src/main.c ****           timer_check = 0;
 1820              		.loc 1 306 63 discriminator 2 view .LVU486
 1821 01ec 514B     		ldr	r3, .L97+116
 1822 01ee 9A42     		cmp	r2, r3
 1823 01f0 05D9     		bls	.L92
 307:Core/Src/main.c ****           current_state = STOP_CHARGING;
 1824              		.loc 1 307 11 is_stmt 1 view .LVU487
 307:Core/Src/main.c ****           current_state = STOP_CHARGING;
 1825              		.loc 1 307 23 is_stmt 0 view .LVU488
 1826 01f2 4F4B     		ldr	r3, .L97+112
 1827 01f4 0022     		movs	r2, #0
 1828 01f6 1A80     		strh	r2, [r3]
 308:Core/Src/main.c ****         }
 1829              		.loc 1 308 11 is_stmt 1 view .LVU489
 308:Core/Src/main.c ****         }
 1830              		.loc 1 308 25 is_stmt 0 view .LVU490
 1831 01f8 3C4B     		ldr	r3, .L97+44
 1832 01fa 0432     		adds	r2, r2, #4
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 58


 1833 01fc 1A70     		strb	r2, [r3]
 1834              	.L92:
 311:Core/Src/main.c **** 
 1835              		.loc 1 311 9 is_stmt 1 view .LVU491
 311:Core/Src/main.c **** 
 1836              		.loc 1 311 20 is_stmt 0 view .LVU492
 1837 01fe 4C4A     		ldr	r2, .L97+112
 1838 0200 1388     		ldrh	r3, [r2]
 1839 0202 0133     		adds	r3, r3, #1
 1840 0204 1380     		strh	r3, [r2]
 313:Core/Src/main.c ****       // case CHARGING_NO_PID:
 1841              		.loc 1 313 7 is_stmt 1 view .LVU493
 1842 0206 41E7     		b	.L89
 1843              	.L84:
 330:Core/Src/main.c **** 
 1844              		.loc 1 330 9 view .LVU494
 1845 0208 FFF7FEFF 		bl	Disable_buck_converter
 1846              	.LVL118:
 333:Core/Src/main.c ****         control_signal = PID_UPPER_THRESHOLD;
 1847              		.loc 1 333 9 view .LVU495
 333:Core/Src/main.c ****         control_signal = PID_UPPER_THRESHOLD;
 1848              		.loc 1 333 20 is_stmt 0 view .LVU496
 1849 020c 2E4A     		ldr	r2, .L97+8
 1850 020e 1E23     		movs	r3, #30
 1851 0210 1380     		strh	r3, [r2]
 334:Core/Src/main.c ****         prev_control_signal = PID_UPPER_THRESHOLD;
 1852              		.loc 1 334 9 is_stmt 1 view .LVU497
 334:Core/Src/main.c ****         prev_control_signal = PID_UPPER_THRESHOLD;
 1853              		.loc 1 334 24 is_stmt 0 view .LVU498
 1854 0212 2E4A     		ldr	r2, .L97+12
 1855 0214 1360     		str	r3, [r2]
 335:Core/Src/main.c **** 
 1856              		.loc 1 335 9 is_stmt 1 view .LVU499
 335:Core/Src/main.c **** 
 1857              		.loc 1 335 29 is_stmt 0 view .LVU500
 1858 0216 2E4A     		ldr	r2, .L97+16
 1859 0218 1360     		str	r3, [r2]
 345:Core/Src/main.c ****       break;
 1860              		.loc 1 345 9 is_stmt 1 view .LVU501
 345:Core/Src/main.c ****       break;
 1861              		.loc 1 345 23 is_stmt 0 view .LVU502
 1862 021a 344B     		ldr	r3, .L97+44
 1863 021c 0622     		movs	r2, #6
 1864 021e 1A70     		strb	r2, [r3]
 346:Core/Src/main.c ****       case OVER_VOLTAGE:
 1865              		.loc 1 346 7 is_stmt 1 view .LVU503
 1866 0220 34E7     		b	.L89
 1867              	.L83:
 348:Core/Src/main.c **** 
 1868              		.loc 1 348 9 view .LVU504
 1869 0222 6421     		movs	r1, #100
 1870 0224 6420     		movs	r0, #100
 1871 0226 FFF7FEFF 		bl	led_blink_nb
 1872              	.LVL119:
 351:Core/Src/main.c **** 
 1873              		.loc 1 351 9 view .LVU505
 1874 022a FFF7FEFF 		bl	Disable_buck_converter
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 59


 1875              	.LVL120:
 354:Core/Src/main.c ****           current_state = INIT;
 1876              		.loc 1 354 9 view .LVU506
 354:Core/Src/main.c ****           current_state = INIT;
 1877              		.loc 1 354 29 is_stmt 0 view .LVU507
 1878 022e 2C4B     		ldr	r3, .L97+32
 1879 0230 1A88     		ldrh	r2, [r3]
 354:Core/Src/main.c ****           current_state = INIT;
 1880              		.loc 1 354 11 view .LVU508
 1881 0232 414B     		ldr	r3, .L97+120
 1882 0234 9A42     		cmp	r2, r3
 1883 0236 00D9     		bls	.LCB1514
 1884 0238 28E7     		b	.L89	@long jump
 1885              	.LCB1514:
 355:Core/Src/main.c ****         }
 1886              		.loc 1 355 11 is_stmt 1 view .LVU509
 355:Core/Src/main.c ****         }
 1887              		.loc 1 355 25 is_stmt 0 view .LVU510
 1888 023a 2C4B     		ldr	r3, .L97+44
 1889 023c 0022     		movs	r2, #0
 1890 023e 1A70     		strb	r2, [r3]
 1891 0240 24E7     		b	.L89
 1892              	.L81:
 361:Core/Src/main.c **** 
 1893              		.loc 1 361 9 is_stmt 1 view .LVU511
 1894 0242 8021     		movs	r1, #128
 1895 0244 0022     		movs	r2, #0
 1896 0246 C901     		lsls	r1, r1, #7
 1897 0248 3C48     		ldr	r0, .L97+124
 1898 024a FFF7FEFF 		bl	HAL_GPIO_WritePin
 1899              	.LVL121:
 373:Core/Src/main.c **** 
 1900              		.loc 1 373 9 view .LVU512
 1901 024e FFF7FEFF 		bl	HAL_SuspendTick
 1902              	.LVL122:
 376:Core/Src/main.c **** 
 1903              		.loc 1 376 9 view .LVU513
 1904 0252 0121     		movs	r1, #1
 1905 0254 0120     		movs	r0, #1
 1906 0256 FFF7FEFF 		bl	HAL_PWR_EnterSTOPMode
 1907              	.LVL123:
 379:Core/Src/main.c **** 
 1908              		.loc 1 379 9 view .LVU514
 379:Core/Src/main.c **** 
 1909              		.loc 1 379 23 is_stmt 0 view .LVU515
 1910 025a 244B     		ldr	r3, .L97+44
 1911 025c 0022     		movs	r2, #0
 1912 025e 1A70     		strb	r2, [r3]
 381:Core/Src/main.c ****       default:
 1913              		.loc 1 381 7 is_stmt 1 view .LVU516
 1914 0260 14E7     		b	.L89
 1915              	.L80:
 383:Core/Src/main.c ****       break;
 1916              		.loc 1 383 7 view .LVU517
 383:Core/Src/main.c ****       break;
 1917              		.loc 1 383 21 is_stmt 0 view .LVU518
 1918 0262 224B     		ldr	r3, .L97+44
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 60


 1919 0264 0022     		movs	r2, #0
 1920 0266 1A70     		strb	r2, [r3]
 384:Core/Src/main.c ****     }
 1921              		.loc 1 384 7 is_stmt 1 view .LVU519
 1922 0268 10E7     		b	.L89
 1923              	.L95:
 1924              	.LBB10:
 388:Core/Src/main.c ****       uint8_t length = 12;
 1925              		.loc 1 388 7 discriminator 1 view .LVU520
 388:Core/Src/main.c ****       uint8_t length = 12;
 1926              		.loc 1 388 19 is_stmt 0 discriminator 1 view .LVU521
 1927 026a 214B     		ldr	r3, .L97+48
 1928 026c 0022     		movs	r2, #0
 1929 026e 1A70     		strb	r2, [r3]
 389:Core/Src/main.c ****       uint8_t buffer [length];
 1930              		.loc 1 389 7 is_stmt 1 discriminator 1 view .LVU522
 1931              	.LVL124:
 390:Core/Src/main.c ****       buffer [0] = 0x02;
 1932              		.loc 1 390 7 discriminator 1 view .LVU523
 391:Core/Src/main.c ****       buffer [1] = length;
 1933              		.loc 1 391 7 discriminator 1 view .LVU524
 391:Core/Src/main.c ****       buffer [1] = length;
 1934              		.loc 1 391 18 is_stmt 0 discriminator 1 view .LVU525
 1935 0270 01AC     		add	r4, sp, #4
 1936              	.LVL125:
 391:Core/Src/main.c ****       buffer [1] = length;
 1937              		.loc 1 391 18 discriminator 1 view .LVU526
 1938 0272 0223     		movs	r3, #2
 1939 0274 2370     		strb	r3, [r4]
 392:Core/Src/main.c ****       buffer [2] = (input_voltage_mv >> 8);
 1940              		.loc 1 392 7 is_stmt 1 discriminator 1 view .LVU527
 392:Core/Src/main.c ****       buffer [2] = (input_voltage_mv >> 8);
 1941              		.loc 1 392 18 is_stmt 0 discriminator 1 view .LVU528
 1942 0276 0A33     		adds	r3, r3, #10
 1943 0278 6370     		strb	r3, [r4, #1]
 393:Core/Src/main.c ****       buffer [3] = (uint8_t)(input_voltage_mv);
 1944              		.loc 1 393 7 is_stmt 1 discriminator 1 view .LVU529
 393:Core/Src/main.c ****       buffer [3] = (uint8_t)(input_voltage_mv);
 1945              		.loc 1 393 18 is_stmt 0 discriminator 1 view .LVU530
 1946 027a 194B     		ldr	r3, .L97+32
 1947 027c 1B88     		ldrh	r3, [r3]
 1948 027e 1A0A     		lsrs	r2, r3, #8
 1949 0280 A270     		strb	r2, [r4, #2]
 394:Core/Src/main.c ****       buffer [4] = (buck_output_voltage_mv >> 8);
 1950              		.loc 1 394 7 is_stmt 1 discriminator 1 view .LVU531
 394:Core/Src/main.c ****       buffer [4] = (buck_output_voltage_mv >> 8);
 1951              		.loc 1 394 18 is_stmt 0 discriminator 1 view .LVU532
 1952 0282 E370     		strb	r3, [r4, #3]
 395:Core/Src/main.c ****       buffer [5] = (uint8_t)(buck_output_voltage_mv);
 1953              		.loc 1 395 7 is_stmt 1 discriminator 1 view .LVU533
 395:Core/Src/main.c ****       buffer [5] = (uint8_t)(buck_output_voltage_mv);
 1954              		.loc 1 395 18 is_stmt 0 discriminator 1 view .LVU534
 1955 0284 244B     		ldr	r3, .L97+88
 1956 0286 1B88     		ldrh	r3, [r3]
 1957 0288 1A0A     		lsrs	r2, r3, #8
 1958 028a 2271     		strb	r2, [r4, #4]
 396:Core/Src/main.c ****       buffer [6] = (buck_current_ma >> 8);
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 61


 1959              		.loc 1 396 7 is_stmt 1 discriminator 1 view .LVU535
 396:Core/Src/main.c ****       buffer [6] = (buck_current_ma >> 8);
 1960              		.loc 1 396 18 is_stmt 0 discriminator 1 view .LVU536
 1961 028c 6371     		strb	r3, [r4, #5]
 397:Core/Src/main.c ****       buffer [7] = (uint8_t)(buck_current_ma);
 1962              		.loc 1 397 7 is_stmt 1 discriminator 1 view .LVU537
 397:Core/Src/main.c ****       buffer [7] = (uint8_t)(buck_current_ma);
 1963              		.loc 1 397 18 is_stmt 0 discriminator 1 view .LVU538
 1964 028e 234B     		ldr	r3, .L97+92
 1965 0290 1B88     		ldrh	r3, [r3]
 1966 0292 1A0A     		lsrs	r2, r3, #8
 1967 0294 A271     		strb	r2, [r4, #6]
 398:Core/Src/main.c ****       buffer [8] = (supply_voltage_mv >> 8);
 1968              		.loc 1 398 7 is_stmt 1 discriminator 1 view .LVU539
 398:Core/Src/main.c ****       buffer [8] = (supply_voltage_mv >> 8);
 1969              		.loc 1 398 18 is_stmt 0 discriminator 1 view .LVU540
 1970 0296 E371     		strb	r3, [r4, #7]
 399:Core/Src/main.c ****       buffer [9] = (uint8_t)(supply_voltage_mv);
 1971              		.loc 1 399 7 is_stmt 1 discriminator 1 view .LVU541
 399:Core/Src/main.c ****       buffer [9] = (uint8_t)(supply_voltage_mv);
 1972              		.loc 1 399 18 is_stmt 0 discriminator 1 view .LVU542
 1973 0298 1A4B     		ldr	r3, .L97+68
 1974 029a 1B88     		ldrh	r3, [r3]
 1975 029c 1A0A     		lsrs	r2, r3, #8
 1976 029e 2272     		strb	r2, [r4, #8]
 400:Core/Src/main.c ****       buffer [10] = pid_result;
 1977              		.loc 1 400 7 is_stmt 1 discriminator 1 view .LVU543
 400:Core/Src/main.c ****       buffer [10] = pid_result;
 1978              		.loc 1 400 18 is_stmt 0 discriminator 1 view .LVU544
 1979 02a0 6372     		strb	r3, [r4, #9]
 401:Core/Src/main.c ****       buffer [11] = calculate_crc_xor(buffer, length-1);//0xFF;
 1980              		.loc 1 401 7 is_stmt 1 discriminator 1 view .LVU545
 401:Core/Src/main.c ****       buffer [11] = calculate_crc_xor(buffer, length-1);//0xFF;
 1981              		.loc 1 401 19 is_stmt 0 discriminator 1 view .LVU546
 1982 02a2 094B     		ldr	r3, .L97+8
 1983 02a4 1B88     		ldrh	r3, [r3]
 1984 02a6 A372     		strb	r3, [r4, #10]
 402:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, buffer, length, 100);
 1985              		.loc 1 402 7 is_stmt 1 discriminator 1 view .LVU547
 402:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, buffer, length, 100);
 1986              		.loc 1 402 21 is_stmt 0 discriminator 1 view .LVU548
 1987 02a8 0B21     		movs	r1, #11
 1988 02aa 2000     		movs	r0, r4
 1989 02ac FFF7FEFF 		bl	calculate_crc_xor
 1990              	.LVL126:
 402:Core/Src/main.c ****       HAL_UART_Transmit(&huart2, buffer, length, 100);
 1991              		.loc 1 402 19 discriminator 1 view .LVU549
 1992 02b0 E072     		strb	r0, [r4, #11]
 403:Core/Src/main.c ****     }
 1993              		.loc 1 403 7 is_stmt 1 discriminator 1 view .LVU550
 1994 02b2 2348     		ldr	r0, .L97+128
 1995 02b4 6423     		movs	r3, #100
 1996 02b6 0C22     		movs	r2, #12
 1997 02b8 2100     		movs	r1, r4
 1998 02ba FFF7FEFF 		bl	HAL_UART_Transmit
 1999              	.LVL127:
 2000 02be EAE6     		b	.L93
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 62


 2001              	.L98:
 2002              		.align	2
 2003              	.L97:
 2004 02c0 00000000 		.word	hadc
 2005 02c4 00000000 		.word	htim2
 2006 02c8 00000000 		.word	pid_result
 2007 02cc 00000000 		.word	control_signal
 2008 02d0 00000000 		.word	prev_control_signal
 2009 02d4 00000000 		.word	integral
 2010 02d8 30750000 		.word	30000
 2011 02dc 00000000 		.word	prev_error
 2012 02e0 00000000 		.word	input_voltage_mv
 2013 02e4 77ECFFFF 		.word	-5001
 2014 02e8 66420000 		.word	16998
 2015 02ec 00000000 		.word	current_state
 2016 02f0 00000000 		.word	send_status
 2017 02f4 00000000 		.word	ADC_CH5
 2018 02f8 00000000 		.word	ADC_CH6
 2019 02fc 00000000 		.word	ADC_CH7
 2020 0300 00000000 		.word	ADC_REF
 2021 0304 00000000 		.word	supply_voltage_mv
 2022 0308 BC6D0300 		.word	224700
 2023 030c 5C120000 		.word	4700
 2024 0310 58150100 		.word	71000
 2025 0314 983A0000 		.word	15000
 2026 0318 00000000 		.word	buck_output_voltage_mv
 2027 031c 00000000 		.word	buck_current_ma
 2028 0320 F0550000 		.word	22000
 2029 0324 00000000 		.word	.L82
 2030 0328 00000000 		.word	check
 2031 032c 87130000 		.word	4999
 2032 0330 00000000 		.word	timer_check
 2033 0334 280A0000 		.word	2600
 2034 0338 EF550000 		.word	21999
 2035 033c 00080050 		.word	1342179328
 2036 0340 00000000 		.word	huart2
 2037              	.LBE10:
 2038              		.cfi_endproc
 2039              	.LFE40:
 2041              		.section	.text.HAL_GPIO_EXTI_Callback,"ax",%progbits
 2042              		.align	1
 2043              		.global	HAL_GPIO_EXTI_Callback
 2044              		.syntax unified
 2045              		.code	16
 2046              		.thumb_func
 2048              	HAL_GPIO_EXTI_Callback:
 2049              	.LVL128:
 2050              	.LFB51:
 751:Core/Src/main.c ****   //if(GPIO_Pin == INT_Pin)
 2051              		.loc 1 751 1 view -0
 2052              		.cfi_startproc
 2053              		@ args = 0, pretend = 0, frame = 0
 2054              		@ frame_needed = 0, uses_anonymous_args = 0
 751:Core/Src/main.c ****   //if(GPIO_Pin == INT_Pin)
 2055              		.loc 1 751 1 is_stmt 0 view .LVU552
 2056 0000 10B5     		push	{r4, lr}
 2057              		.cfi_def_cfa_offset 8
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 63


 2058              		.cfi_offset 4, -8
 2059              		.cfi_offset 14, -4
 754:Core/Src/main.c **** 	  HAL_ResumeTick();
 2060              		.loc 1 754 4 is_stmt 1 view .LVU553
 2061 0002 FFF7FEFF 		bl	SystemClock_Config
 2062              	.LVL129:
 755:Core/Src/main.c ****   //}
 2063              		.loc 1 755 4 view .LVU554
 2064 0006 FFF7FEFF 		bl	HAL_ResumeTick
 2065              	.LVL130:
 757:Core/Src/main.c **** 
 2066              		.loc 1 757 1 is_stmt 0 view .LVU555
 2067              		@ sp needed
 2068 000a 10BD     		pop	{r4, pc}
 2069              		.cfi_endproc
 2070              	.LFE51:
 2072              		.global	kd
 2073              		.section	.data.kd,"aw"
 2074              		.align	1
 2077              	kd:
 2078 0000 0A00     		.short	10
 2079              		.global	ki
 2080              		.section	.data.ki,"aw"
 2081              		.align	1
 2084              	ki:
 2085 0000 6400     		.short	100
 2086              		.global	kp
 2087              		.section	.data.kp,"aw"
 2088              		.align	1
 2091              	kp:
 2092 0000 0500     		.short	5
 2093              		.global	current_state
 2094              		.section	.bss.current_state,"aw",%nobits
 2097              	current_state:
 2098 0000 00       		.space	1
 2099              		.global	spi_buffer
 2100              		.section	.bss.spi_buffer,"aw",%nobits
 2101              		.align	2
 2104              	spi_buffer:
 2105 0000 0000     		.space	2
 2106              		.global	last_stable_voltage
 2107              		.section	.bss.last_stable_voltage,"aw",%nobits
 2108              		.align	1
 2111              	last_stable_voltage:
 2112 0000 0000     		.space	2
 2113              		.global	last_stable_PID_value
 2114              		.section	.bss.last_stable_PID_value,"aw",%nobits
 2117              	last_stable_PID_value:
 2118 0000 00       		.space	1
 2119              		.global	prev_error
 2120              		.section	.bss.prev_error,"aw",%nobits
 2121              		.align	2
 2124              	prev_error:
 2125 0000 00000000 		.space	4
 2126              		.global	integral
 2127              		.section	.data.integral,"aw"
 2128              		.align	2
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 64


 2131              	integral:
 2132 0000 30750000 		.word	30000
 2133              		.global	prev_control_signal
 2134              		.section	.data.prev_control_signal,"aw"
 2135              		.align	2
 2138              	prev_control_signal:
 2139 0000 1E000000 		.word	30
 2140              		.global	control_signal
 2141              		.section	.data.control_signal,"aw"
 2142              		.align	2
 2145              	control_signal:
 2146 0000 1E000000 		.word	30
 2147              		.global	check
 2148              		.section	.bss.check,"aw",%nobits
 2151              	check:
 2152 0000 00       		.space	1
 2153              		.global	pid_setpoint
 2154              		.section	.bss.pid_setpoint,"aw",%nobits
 2155              		.align	1
 2158              	pid_setpoint:
 2159 0000 0000     		.space	2
 2160              		.global	pid_result
 2161              		.section	.bss.pid_result,"aw",%nobits
 2162              		.align	1
 2165              	pid_result:
 2166 0000 0000     		.space	2
 2167              		.global	send_status
 2168              		.section	.data.send_status,"aw"
 2171              	send_status:
 2172 0000 01       		.byte	1
 2173              		.global	timestamp
 2174              		.section	.bss.timestamp,"aw",%nobits
 2175              		.align	2
 2178              	timestamp:
 2179 0000 00000000 		.space	4
 2180              		.global	isOn
 2181              		.section	.bss.isOn,"aw",%nobits
 2184              	isOn:
 2185 0000 00       		.space	1
 2186              		.global	timer_check
 2187              		.section	.bss.timer_check,"aw",%nobits
 2188              		.align	1
 2191              	timer_check:
 2192 0000 0000     		.space	2
 2193              		.global	previous_state
 2194              		.section	.bss.previous_state,"aw",%nobits
 2197              	previous_state:
 2198 0000 00       		.space	1
 2199              		.global	buck_current_ma
 2200              		.section	.bss.buck_current_ma,"aw",%nobits
 2201              		.align	1
 2204              	buck_current_ma:
 2205 0000 0000     		.space	2
 2206              		.global	buck_output_voltage_mv
 2207              		.section	.bss.buck_output_voltage_mv,"aw",%nobits
 2208              		.align	1
 2211              	buck_output_voltage_mv:
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 65


 2212 0000 0000     		.space	2
 2213              		.global	input_voltage_mv
 2214              		.section	.bss.input_voltage_mv,"aw",%nobits
 2215              		.align	1
 2218              	input_voltage_mv:
 2219 0000 0000     		.space	2
 2220              		.global	supply_voltage_mv
 2221              		.section	.bss.supply_voltage_mv,"aw",%nobits
 2222              		.align	1
 2225              	supply_voltage_mv:
 2226 0000 0000     		.space	2
 2227              		.global	ADC_REF
 2228              		.section	.bss.ADC_REF,"aw",%nobits
 2229              		.align	1
 2232              	ADC_REF:
 2233 0000 0000     		.space	2
 2234              		.global	ADC_CH7
 2235              		.section	.bss.ADC_CH7,"aw",%nobits
 2236              		.align	1
 2239              	ADC_CH7:
 2240 0000 0000     		.space	2
 2241              		.global	ADC_CH6
 2242              		.section	.bss.ADC_CH6,"aw",%nobits
 2243              		.align	1
 2246              	ADC_CH6:
 2247 0000 0000     		.space	2
 2248              		.global	ADC_CH5
 2249              		.section	.bss.ADC_CH5,"aw",%nobits
 2250              		.align	1
 2253              	ADC_CH5:
 2254 0000 0000     		.space	2
 2255              		.global	huart2
 2256              		.section	.bss.huart2,"aw",%nobits
 2257              		.align	2
 2260              	huart2:
 2261 0000 00000000 		.space	136
 2261      00000000 
 2261      00000000 
 2261      00000000 
 2261      00000000 
 2262              		.global	htim2
 2263              		.section	.bss.htim2,"aw",%nobits
 2264              		.align	2
 2267              	htim2:
 2268 0000 00000000 		.space	64
 2268      00000000 
 2268      00000000 
 2268      00000000 
 2268      00000000 
 2269              		.global	hspi1
 2270              		.section	.bss.hspi1,"aw",%nobits
 2271              		.align	2
 2274              	hspi1:
 2275 0000 00000000 		.space	88
 2275      00000000 
 2275      00000000 
 2275      00000000 
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 66


 2275      00000000 
 2276              		.global	hadc
 2277              		.section	.bss.hadc,"aw",%nobits
 2278              		.align	2
 2281              	hadc:
 2282 0000 00000000 		.space	92
 2282      00000000 
 2282      00000000 
 2282      00000000 
 2282      00000000 
 2283              		.text
 2284              	.Letext0:
 2285              		.file 3 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l011xx.h"
 2286              		.file 4 "c:\\users\\jarne\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xpa
 2287              		.file 5 "c:\\users\\jarne\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xpa
 2288              		.file 6 "Drivers/CMSIS/Device/ST/STM32L0xx/Include/stm32l0xx.h"
 2289              		.file 7 "c:\\users\\jarne\\appdata\\roaming\\code\\user\\globalstorage\\bmd.stm32-for-vscode\\@xpa
 2290              		.file 8 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_def.h"
 2291              		.file 9 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc.h"
 2292              		.file 10 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_rcc_ex.h"
 2293              		.file 11 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_gpio.h"
 2294              		.file 12 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_dma.h"
 2295              		.file 13 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc.h"
 2296              		.file 14 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_spi.h"
 2297              		.file 15 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim.h"
 2298              		.file 16 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_uart.h"
 2299              		.file 17 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_tim_ex.h"
 2300              		.file 18 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_cortex.h"
 2301              		.file 19 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_pwr.h"
 2302              		.file 20 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal.h"
 2303              		.file 21 "Drivers/STM32L0xx_HAL_Driver/Inc/stm32l0xx_hal_adc_ex.h"
 2304              		.file 22 "<built-in>"
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.c
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:19     .text.MX_GPIO_Init:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:24     .text.MX_GPIO_Init:0000000000000000 MX_GPIO_Init
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:190    .text.MX_GPIO_Init:00000000000000b8 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:197    .text.load_switch_enable:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:203    .text.load_switch_enable:0000000000000000 load_switch_enable
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:234    .text.load_switch_disable:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:240    .text.load_switch_disable:0000000000000000 load_switch_disable
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:271    .text.led_blink:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:277    .text.led_blink:0000000000000000 led_blink
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:328    .text.led_blink:0000000000000030 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:333    .text.led_blink_nb:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:339    .text.led_blink_nb:0000000000000000 led_blink_nb
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:434    .text.led_blink_nb:0000000000000058 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2184   .bss.isOn:0000000000000000 isOn
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2178   .bss.timestamp:0000000000000000 timestamp
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:441    .text.Enable_buck_converter:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:447    .text.Enable_buck_converter:0000000000000000 Enable_buck_converter
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:486    .text.Disable_buck_converter:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:492    .text.Disable_buck_converter:0000000000000000 Disable_buck_converter
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:527    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:533    .text.HAL_TIM_PeriodElapsedCallback:0000000000000000 HAL_TIM_PeriodElapsedCallback
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:552    .text.HAL_TIM_PeriodElapsedCallback:0000000000000008 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2171   .data.send_status:0000000000000000 send_status
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:557    .text.calculate_crc_xor:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:563    .text.calculate_crc_xor:0000000000000000 calculate_crc_xor
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:613    .text.pid_controller:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:619    .text.pid_controller:0000000000000000 pid_controller
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:710    .text.pid_controller:0000000000000050 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2145   .data.control_signal:0000000000000000 control_signal
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:716    .text.change_potentiometer:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:722    .text.change_potentiometer:0000000000000000 change_potentiometer
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:771    .text.change_potentiometer:0000000000000030 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2104   .bss.spi_buffer:0000000000000000 spi_buffer
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2274   .bss.hspi1:0000000000000000 hspi1
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:777    .text.Error_Handler:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:783    .text.Error_Handler:0000000000000000 Error_Handler
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:815    .text.MX_ADC_Init:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:820    .text.MX_ADC_Init:0000000000000000 MX_ADC_Init
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:994    .text.MX_ADC_Init:00000000000000b4 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2281   .bss.hadc:0000000000000000 hadc
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1004   .text.MX_USART2_UART_Init:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1009   .text.MX_USART2_UART_Init:0000000000000000 MX_USART2_UART_Init
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1072   .text.MX_USART2_UART_Init:0000000000000030 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2260   .bss.huart2:0000000000000000 huart2
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1078   .text.MX_SPI1_Init:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1083   .text.MX_SPI1_Init:0000000000000000 MX_SPI1_Init
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1154   .text.MX_SPI1_Init:0000000000000038 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1160   .text.MX_TIM2_Init:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1165   .text.MX_TIM2_Init:0000000000000000 MX_TIM2_Init
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1273   .text.MX_TIM2_Init:0000000000000074 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2267   .bss.htim2:0000000000000000 htim2
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1278   .text.SystemClock_Config:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1284   .text.SystemClock_Config:0000000000000000 SystemClock_Config
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1414   .text.SystemClock_Config:000000000000008c $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1420   .text.main:0000000000000000 $t
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 68


C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1426   .text.main:0000000000000000 main
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:1736   .rodata.main:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2004   .text.main:00000000000002c0 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2165   .bss.pid_result:0000000000000000 pid_result
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2138   .data.prev_control_signal:0000000000000000 prev_control_signal
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2131   .data.integral:0000000000000000 integral
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2124   .bss.prev_error:0000000000000000 prev_error
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2218   .bss.input_voltage_mv:0000000000000000 input_voltage_mv
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2097   .bss.current_state:0000000000000000 current_state
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2253   .bss.ADC_CH5:0000000000000000 ADC_CH5
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2246   .bss.ADC_CH6:0000000000000000 ADC_CH6
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2239   .bss.ADC_CH7:0000000000000000 ADC_CH7
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2232   .bss.ADC_REF:0000000000000000 ADC_REF
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2225   .bss.supply_voltage_mv:0000000000000000 supply_voltage_mv
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2211   .bss.buck_output_voltage_mv:0000000000000000 buck_output_voltage_mv
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2204   .bss.buck_current_ma:0000000000000000 buck_current_ma
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2151   .bss.check:0000000000000000 check
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2191   .bss.timer_check:0000000000000000 timer_check
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2042   .text.HAL_GPIO_EXTI_Callback:0000000000000000 $t
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2048   .text.HAL_GPIO_EXTI_Callback:0000000000000000 HAL_GPIO_EXTI_Callback
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2077   .data.kd:0000000000000000 kd
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2074   .data.kd:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2084   .data.ki:0000000000000000 ki
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2081   .data.ki:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2091   .data.kp:0000000000000000 kp
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2088   .data.kp:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2098   .bss.current_state:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2101   .bss.spi_buffer:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2111   .bss.last_stable_voltage:0000000000000000 last_stable_voltage
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2108   .bss.last_stable_voltage:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2117   .bss.last_stable_PID_value:0000000000000000 last_stable_PID_value
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2118   .bss.last_stable_PID_value:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2121   .bss.prev_error:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2128   .data.integral:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2135   .data.prev_control_signal:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2142   .data.control_signal:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2152   .bss.check:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2158   .bss.pid_setpoint:0000000000000000 pid_setpoint
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2155   .bss.pid_setpoint:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2162   .bss.pid_result:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2175   .bss.timestamp:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2185   .bss.isOn:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2188   .bss.timer_check:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2197   .bss.previous_state:0000000000000000 previous_state
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2198   .bss.previous_state:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2201   .bss.buck_current_ma:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2208   .bss.buck_output_voltage_mv:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2215   .bss.input_voltage_mv:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2222   .bss.supply_voltage_mv:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2229   .bss.ADC_REF:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2236   .bss.ADC_CH7:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2243   .bss.ADC_CH6:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2250   .bss.ADC_CH5:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2257   .bss.huart2:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2264   .bss.htim2:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2271   .bss.hspi1:0000000000000000 $d
C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s:2278   .bss.hadc:0000000000000000 $d
ARM GAS  C:\Users\jarne\AppData\Local\Temp\cczOgAwQ.s 			page 69



UNDEFINED SYMBOLS
memset
HAL_GPIO_WritePin
HAL_GPIO_Init
HAL_NVIC_SetPriority
HAL_NVIC_EnableIRQ
HAL_Delay
HAL_GetTick
__aeabi_idiv
HAL_SPI_Transmit
HAL_ADC_Init
HAL_ADC_ConfigChannel
HAL_UART_Init
HAL_SPI_Init
HAL_TIM_Base_Init
HAL_TIM_ConfigClockSource
HAL_TIMEx_MasterConfigSynchronization
HAL_RCC_OscConfig
HAL_RCC_ClockConfig
HAL_RCCEx_PeriphCLKConfig
HAL_Init
HAL_ADCEx_Calibration_Start
HAL_TIM_Base_Start_IT
HAL_ADC_Start
HAL_ADC_PollForConversion
HAL_ADC_GetValue
HAL_ADC_Stop
HAL_SuspendTick
HAL_PWR_EnterSTOPMode
HAL_UART_Transmit
HAL_ResumeTick
